// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common_lobby.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ELobbyMemberCoachRequestState int32

const (
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_None     ELobbyMemberCoachRequestState = 0
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_Accepted ELobbyMemberCoachRequestState = 1
	ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_Rejected ELobbyMemberCoachRequestState = 2
)

var ELobbyMemberCoachRequestState_name = map[int32]string{
	0: "k_eLobbyMemberCoachRequestState_None",
	1: "k_eLobbyMemberCoachRequestState_Accepted",
	2: "k_eLobbyMemberCoachRequestState_Rejected",
}

var ELobbyMemberCoachRequestState_value = map[string]int32{
	"k_eLobbyMemberCoachRequestState_None":     0,
	"k_eLobbyMemberCoachRequestState_Accepted": 1,
	"k_eLobbyMemberCoachRequestState_Rejected": 2,
}

func (x ELobbyMemberCoachRequestState) Enum() *ELobbyMemberCoachRequestState {
	p := new(ELobbyMemberCoachRequestState)
	*p = x
	return p
}

func (x ELobbyMemberCoachRequestState) String() string {
	return proto.EnumName(ELobbyMemberCoachRequestState_name, int32(x))
}

func (x *ELobbyMemberCoachRequestState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELobbyMemberCoachRequestState_value, data, "ELobbyMemberCoachRequestState")
	if err != nil {
		return err
	}
	*x = ELobbyMemberCoachRequestState(value)
	return nil
}

func (ELobbyMemberCoachRequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{0}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
	LobbyDotaTVDelay_LobbyDotaTV_900 LobbyDotaTVDelay = 3
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
	3: "LobbyDotaTV_900",
}

var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
	"LobbyDotaTV_900": 3,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}

func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}

func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{1}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

var LobbyDotaPauseSetting_name = map[int32]string{
	0: "LobbyDotaPauseSetting_Unlimited",
	1: "LobbyDotaPauseSetting_Limited",
	2: "LobbyDotaPauseSetting_Disabled",
}

var LobbyDotaPauseSetting_value = map[string]int32{
	"LobbyDotaPauseSetting_Unlimited": 0,
	"LobbyDotaPauseSetting_Limited":   1,
	"LobbyDotaPauseSetting_Disabled":  2,
}

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return proto.EnumName(LobbyDotaPauseSetting_name, int32(x))
}

func (x *LobbyDotaPauseSetting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaPauseSetting_value, data, "LobbyDotaPauseSetting")
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(value)
	return nil
}

func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{2}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}

var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}

func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}

func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{14, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID           CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH      CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE          CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH    CSODOTALobby_LobbyType = 4
	CSODOTALobby_COMPETITIVE_MATCH CSODOTALobby_LobbyType = 7
	CSODOTALobby_WEEKEND_TOURNEY   CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH   CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR         CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH       CSODOTALobby_LobbyType = 12
	CSODOTALobby_NEW_PLAYER_POOL   CSODOTALobby_LobbyType = 14
	CSODOTALobby_FEATURED_GAMEMODE CSODOTALobby_LobbyType = 15
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	4:  "COOP_BOT_MATCH",
	7:  "COMPETITIVE_MATCH",
	9:  "WEEKEND_TOURNEY",
	10: "LOCAL_BOT_MATCH",
	11: "SPECTATOR",
	12: "EVENT_MATCH",
	14: "NEW_PLAYER_POOL",
	15: "FEATURED_GAMEMODE",
}

var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":           -1,
	"CASUAL_MATCH":      0,
	"PRACTICE":          1,
	"COOP_BOT_MATCH":    4,
	"COMPETITIVE_MATCH": 7,
	"WEEKEND_TOURNEY":   9,
	"LOCAL_BOT_MATCH":   10,
	"SPECTATOR":         11,
	"EVENT_MATCH":       12,
	"NEW_PLAYER_POOL":   14,
	"FEATURED_GAMEMODE": 15,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}

func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}

func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{14, 1}
}

type CMsgLobbyCoachFriendRequest struct {
	CoachAccountId       *uint32                        `protobuf:"varint,1,opt,name=coach_account_id,json=coachAccountId" json:"coach_account_id,omitempty"`
	PlayerAccountId      *uint32                        `protobuf:"varint,2,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	RequestState         *ELobbyMemberCoachRequestState `protobuf:"varint,3,opt,name=request_state,json=requestState,enum=protocol.ELobbyMemberCoachRequestState,def=0" json:"request_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CMsgLobbyCoachFriendRequest) Reset()         { *m = CMsgLobbyCoachFriendRequest{} }
func (m *CMsgLobbyCoachFriendRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyCoachFriendRequest) ProtoMessage()    {}
func (*CMsgLobbyCoachFriendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{0}
}

func (m *CMsgLobbyCoachFriendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyCoachFriendRequest.Unmarshal(m, b)
}
func (m *CMsgLobbyCoachFriendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyCoachFriendRequest.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyCoachFriendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyCoachFriendRequest.Merge(m, src)
}
func (m *CMsgLobbyCoachFriendRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyCoachFriendRequest.Size(m)
}
func (m *CMsgLobbyCoachFriendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyCoachFriendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyCoachFriendRequest proto.InternalMessageInfo

const Default_CMsgLobbyCoachFriendRequest_RequestState ELobbyMemberCoachRequestState = ELobbyMemberCoachRequestState_k_eLobbyMemberCoachRequestState_None

func (m *CMsgLobbyCoachFriendRequest) GetCoachAccountId() uint32 {
	if m != nil && m.CoachAccountId != nil {
		return *m.CoachAccountId
	}
	return 0
}

func (m *CMsgLobbyCoachFriendRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgLobbyCoachFriendRequest) GetRequestState() ELobbyMemberCoachRequestState {
	if m != nil && m.RequestState != nil {
		return *m.RequestState
	}
	return Default_CMsgLobbyCoachFriendRequest_RequestState
}

type CMsgLobbyPlayerPlusSubscriptionData struct {
	HeroBadges           []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge `protobuf:"bytes,1,rep,name=hero_badges,json=heroBadges" json:"hero_badges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *CMsgLobbyPlayerPlusSubscriptionData) Reset()         { *m = CMsgLobbyPlayerPlusSubscriptionData{} }
func (m *CMsgLobbyPlayerPlusSubscriptionData) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyPlayerPlusSubscriptionData) ProtoMessage()    {}
func (*CMsgLobbyPlayerPlusSubscriptionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{1}
}

func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Unmarshal(m, b)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Merge(m, src)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.Size(m)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData proto.InternalMessageInfo

func (m *CMsgLobbyPlayerPlusSubscriptionData) GetHeroBadges() []*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge {
	if m != nil {
		return m.HeroBadges
	}
	return nil
}

type CMsgLobbyPlayerPlusSubscriptionData_HeroBadge struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroBadgeXp          *uint32  `protobuf:"varint,2,opt,name=hero_badge_xp,json=heroBadgeXp" json:"hero_badge_xp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Reset() {
	*m = CMsgLobbyPlayerPlusSubscriptionData_HeroBadge{}
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) ProtoMessage() {}
func (*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{1, 0}
}

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Unmarshal(m, b)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Merge(m, src)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.Size(m)
}
func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge proto.InternalMessageInfo

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgLobbyPlayerPlusSubscriptionData_HeroBadge) GetHeroBadgeXp() uint32 {
	if m != nil && m.HeroBadgeXp != nil {
		return *m.HeroBadgeXp
	}
	return 0
}

type CMsgLobbyEventPoints struct {
	EventId              *uint32                               `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountPoints        []*CMsgLobbyEventPoints_AccountPoints `protobuf:"bytes,2,rep,name=account_points,json=accountPoints" json:"account_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CMsgLobbyEventPoints) Reset()         { *m = CMsgLobbyEventPoints{} }
func (m *CMsgLobbyEventPoints) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints) ProtoMessage()    {}
func (*CMsgLobbyEventPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{2}
}

func (m *CMsgLobbyEventPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints.Merge(m, src)
}
func (m *CMsgLobbyEventPoints) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints.Size(m)
}
func (m *CMsgLobbyEventPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CMsgLobbyEventPoints) GetAccountPoints() []*CMsgLobbyEventPoints_AccountPoints {
	if m != nil {
		return m.AccountPoints
	}
	return nil
}

type CMsgLobbyEventPoints_PeriodicResourceData struct {
	PeriodicResourceId   *uint32  `protobuf:"varint,1,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	Remaining            *uint32  `protobuf:"varint,2,opt,name=remaining" json:"remaining,omitempty"`
	Max                  *uint32  `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventPoints_PeriodicResourceData) Reset() {
	*m = CMsgLobbyEventPoints_PeriodicResourceData{}
}
func (m *CMsgLobbyEventPoints_PeriodicResourceData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyEventPoints_PeriodicResourceData) ProtoMessage() {}
func (*CMsgLobbyEventPoints_PeriodicResourceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{2, 0}
}

func (m *CMsgLobbyEventPoints_PeriodicResourceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData.Merge(m, src)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceData) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData.Size(m)
}
func (m *CMsgLobbyEventPoints_PeriodicResourceData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_PeriodicResourceData proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_PeriodicResourceData) GetPeriodicResourceId() uint32 {
	if m != nil && m.PeriodicResourceId != nil {
		return *m.PeriodicResourceId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_PeriodicResourceData) GetRemaining() uint32 {
	if m != nil && m.Remaining != nil {
		return *m.Remaining
	}
	return 0
}

func (m *CMsgLobbyEventPoints_PeriodicResourceData) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

type CMsgLobbyEventPoints_NetworkedEventAction struct {
	ActionId             *uint32  `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	TimesGranted         *uint32  `protobuf:"varint,2,opt,name=times_granted,json=timesGranted" json:"times_granted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventPoints_NetworkedEventAction) Reset() {
	*m = CMsgLobbyEventPoints_NetworkedEventAction{}
}
func (m *CMsgLobbyEventPoints_NetworkedEventAction) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgLobbyEventPoints_NetworkedEventAction) ProtoMessage() {}
func (*CMsgLobbyEventPoints_NetworkedEventAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{2, 1}
}

func (m *CMsgLobbyEventPoints_NetworkedEventAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_NetworkedEventAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventPoints_NetworkedEventAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction.Merge(m, src)
}
func (m *CMsgLobbyEventPoints_NetworkedEventAction) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction.Size(m)
}
func (m *CMsgLobbyEventPoints_NetworkedEventAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_NetworkedEventAction proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_NetworkedEventAction) GetActionId() uint32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_NetworkedEventAction) GetTimesGranted() uint32 {
	if m != nil && m.TimesGranted != nil {
		return *m.TimesGranted
	}
	return 0
}

type CMsgLobbyEventPoints_AccountPoints struct {
	AccountId              *uint32                                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	NormalPoints           *uint32                                      `protobuf:"varint,2,opt,name=normal_points,json=normalPoints" json:"normal_points,omitempty"`
	PremiumPoints          *uint32                                      `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	Owned                  *bool                                        `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	ActiveEffectsMask      *uint64                                      `protobuf:"varint,12,opt,name=active_effects_mask,json=activeEffectsMask" json:"active_effects_mask,omitempty"`
	WagerStreak            *uint32                                      `protobuf:"varint,23,opt,name=wager_streak,json=wagerStreak" json:"wager_streak,omitempty"`
	EventGameCustomActions []*CMsgLobbyEventPoints_NetworkedEventAction `protobuf:"bytes,25,rep,name=event_game_custom_actions,json=eventGameCustomActions" json:"event_game_custom_actions,omitempty"`
	TipAmountIndex         *uint32                                      `protobuf:"varint,26,opt,name=tip_amount_index,json=tipAmountIndex" json:"tip_amount_index,omitempty"`
	ActiveEventSeasonId    *uint32                                      `protobuf:"varint,27,opt,name=active_event_season_id,json=activeEventSeasonId" json:"active_event_season_id,omitempty"`
	TeleportFxLevel        *uint32                                      `protobuf:"varint,28,opt,name=teleport_fx_level,json=teleportFxLevel" json:"teleport_fx_level,omitempty"`
	NetworkedEventActions  []*CMsgLobbyEventPoints_NetworkedEventAction `protobuf:"bytes,30,rep,name=networked_event_actions,json=networkedEventActions" json:"networked_event_actions,omitempty"`
	PeriodicResources      []*CMsgLobbyEventPoints_PeriodicResourceData `protobuf:"bytes,31,rep,name=periodic_resources,json=periodicResources" json:"periodic_resources,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                     `json:"-"`
	XXX_unrecognized       []byte                                       `json:"-"`
	XXX_sizecache          int32                                        `json:"-"`
}

func (m *CMsgLobbyEventPoints_AccountPoints) Reset()         { *m = CMsgLobbyEventPoints_AccountPoints{} }
func (m *CMsgLobbyEventPoints_AccountPoints) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventPoints_AccountPoints) ProtoMessage()    {}
func (*CMsgLobbyEventPoints_AccountPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{2, 2}
}

func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Unmarshal(m, b)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Merge(m, src)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.Size(m)
}
func (m *CMsgLobbyEventPoints_AccountPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventPoints_AccountPoints proto.InternalMessageInfo

func (m *CMsgLobbyEventPoints_AccountPoints) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetNormalPoints() uint32 {
	if m != nil && m.NormalPoints != nil {
		return *m.NormalPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPremiumPoints() uint32 {
	if m != nil && m.PremiumPoints != nil {
		return *m.PremiumPoints
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetOwned() bool {
	if m != nil && m.Owned != nil {
		return *m.Owned
	}
	return false
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetActiveEffectsMask() uint64 {
	if m != nil && m.ActiveEffectsMask != nil {
		return *m.ActiveEffectsMask
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetWagerStreak() uint32 {
	if m != nil && m.WagerStreak != nil {
		return *m.WagerStreak
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetEventGameCustomActions() []*CMsgLobbyEventPoints_NetworkedEventAction {
	if m != nil {
		return m.EventGameCustomActions
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetTipAmountIndex() uint32 {
	if m != nil && m.TipAmountIndex != nil {
		return *m.TipAmountIndex
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetActiveEventSeasonId() uint32 {
	if m != nil && m.ActiveEventSeasonId != nil {
		return *m.ActiveEventSeasonId
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetTeleportFxLevel() uint32 {
	if m != nil && m.TeleportFxLevel != nil {
		return *m.TeleportFxLevel
	}
	return 0
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetNetworkedEventActions() []*CMsgLobbyEventPoints_NetworkedEventAction {
	if m != nil {
		return m.NetworkedEventActions
	}
	return nil
}

func (m *CMsgLobbyEventPoints_AccountPoints) GetPeriodicResources() []*CMsgLobbyEventPoints_PeriodicResourceData {
	if m != nil {
		return m.PeriodicResources
	}
	return nil
}

type CMsgLobbyEventGameData struct {
	GameSeed             *uint32  `protobuf:"varint,1,opt,name=game_seed,json=gameSeed" json:"game_seed,omitempty"`
	EventWindowStartTime *uint32  `protobuf:"varint,2,opt,name=event_window_start_time,json=eventWindowStartTime" json:"event_window_start_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventGameData) Reset()         { *m = CMsgLobbyEventGameData{} }
func (m *CMsgLobbyEventGameData) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventGameData) ProtoMessage()    {}
func (*CMsgLobbyEventGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{3}
}

func (m *CMsgLobbyEventGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventGameData.Unmarshal(m, b)
}
func (m *CMsgLobbyEventGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventGameData.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventGameData.Merge(m, src)
}
func (m *CMsgLobbyEventGameData) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventGameData.Size(m)
}
func (m *CMsgLobbyEventGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventGameData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventGameData proto.InternalMessageInfo

func (m *CMsgLobbyEventGameData) GetGameSeed() uint32 {
	if m != nil && m.GameSeed != nil {
		return *m.GameSeed
	}
	return 0
}

func (m *CMsgLobbyEventGameData) GetEventWindowStartTime() uint32 {
	if m != nil && m.EventWindowStartTime != nil {
		return *m.EventWindowStartTime
	}
	return 0
}

type CSODOTALobbyInvite struct {
	GroupId              *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId             *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName           *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members              []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId         *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid            *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc        *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp  *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTALobbyInvite) Reset()         { *m = CSODOTALobbyInvite{} }
func (m *CSODOTALobbyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite) ProtoMessage()    {}
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{4}
}

func (m *CSODOTALobbyInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite.Merge(m, src)
}
func (m *CSODOTALobbyInvite) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite.Size(m)
}
func (m *CSODOTALobbyInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite proto.InternalMessageInfo

func (m *CSODOTALobbyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyInvite_LobbyMember struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId              *uint64  `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobbyInvite_LobbyMember) Reset()         { *m = CSODOTALobbyInvite_LobbyMember{} }
func (m *CSODOTALobbyInvite_LobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{4, 0}
}

func (m *CSODOTALobbyInvite_LobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Merge(m, src)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Size(m)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite_LobbyMember proto.InternalMessageInfo

func (m *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CSODOTALobbyMember struct {
	Id                     *uint64                  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *uint32                  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM            `protobuf:"varint,3,opt,name=team,enum=protocol.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                   *string                  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                   *uint32                  `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId                *uint64                  `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel              *uint32                  `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                 *uint32                  `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded          *uint32                  `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus           *DOTALeaverStatusT       `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=protocol.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                  `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel                *uint32                  `protobuf:"varint,17,opt,name=channel,def=6" json:"channel,omitempty"`
	DisabledHeroId         []uint32                 `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	EnabledHeroId          []uint32                 `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam              *DOTA_GC_TEAM            `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=protocol.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CoachedAccountIds      []uint32                 `protobuf:"varint,53,rep,name=coached_account_ids,json=coachedAccountIds" json:"coached_account_ids,omitempty"`
	CoachRating            *uint32                  `protobuf:"varint,42,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	PwrdCyberCafeId        *uint32                  `protobuf:"varint,24,opt,name=pwrd_cyber_cafe_id,json=pwrdCyberCafeId" json:"pwrd_cyber_cafe_id,omitempty"`
	PwrdCyberCafeName      *string                  `protobuf:"bytes,25,opt,name=pwrd_cyber_cafe_name,json=pwrdCyberCafeName" json:"pwrd_cyber_cafe_name,omitempty"`
	DisabledRandomHeroBits []uint32                 `protobuf:"fixed32,41,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	RankChange             *int32                   `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman              *bool                    `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds   []uint32                 `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	SearchMatchType        *MatchType               `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=protocol.MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked     *uint64                  `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPlusSubscriber       *bool                    `protobuf:"varint,36,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	LaneSelectionFlags     *uint32                  `protobuf:"varint,38,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	CanEarnRewards         *bool                    `protobuf:"varint,39,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM            `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=protocol.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	WasMvpLastGame         *bool                    `protobuf:"varint,43,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	PendingAwards          []*CMsgPendingEventAward `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType       `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=protocol.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	QueuePointAdjustment   *int32                   `protobuf:"zigzag32,47,opt,name=queue_point_adjustment,json=queuePointAdjustment" json:"queue_point_adjustment,omitempty"`
	RankTier               *int32                   `protobuf:"varint,48,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	Title                  *uint32                  `protobuf:"varint,50,opt,name=title" json:"title,omitempty"`
	GuildId                *uint32                  `protobuf:"varint,51,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	ReportsAvailable       *uint32                  `protobuf:"varint,52,opt,name=reports_available,json=reportsAvailable" json:"reports_available,omitempty"`
	IsSteamChina           *bool                    `protobuf:"varint,54,opt,name=is_steam_china,json=isSteamChina" json:"is_steam_china,omitempty"`
	LiveSpectatorAccountId *uint32                  `protobuf:"varint,55,opt,name=live_spectator_account_id,json=liveSpectatorAccountId" json:"live_spectator_account_id,omitempty"`
	CommsReportsAvailable  *uint32                  `protobuf:"varint,56,opt,name=comms_reports_available,json=commsReportsAvailable" json:"comms_reports_available,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *CSODOTALobbyMember) Reset()         { *m = CSODOTALobbyMember{} }
func (m *CSODOTALobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{5}
}

func (m *CSODOTALobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyMember.Unmarshal(m, b)
}
func (m *CSODOTALobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyMember.Merge(m, src)
}
func (m *CSODOTALobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyMember.Size(m)
}
func (m *CSODOTALobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyMember proto.InternalMessageInfo

const Default_CSODOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CSODOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CSODOTALobbyMember_Channel uint32 = 6
const Default_CSODOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CSODOTALobbyMember_SearchMatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTALobbyMember_LiveSpectatorTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CSODOTALobbyMember_RankMmrBoostType EDOTAMMRBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None

func (m *CSODOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CSODOTALobbyMember_Team
}

func (m *CSODOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CSODOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CSODOTALobbyMember_LeaverStatus
}

func (m *CSODOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CSODOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return Default_CSODOTALobbyMember_Channel
}

func (m *CSODOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CSODOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CSODOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CSODOTALobbyMember_CoachTeam
}

func (m *CSODOTALobbyMember) GetCoachedAccountIds() []uint32 {
	if m != nil {
		return m.CoachedAccountIds
	}
	return nil
}

func (m *CSODOTALobbyMember) GetCoachRating() uint32 {
	if m != nil && m.CoachRating != nil {
		return *m.CoachRating
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPwrdCyberCafeId() uint32 {
	if m != nil && m.PwrdCyberCafeId != nil {
		return *m.PwrdCyberCafeId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPwrdCyberCafeName() string {
	if m != nil && m.PwrdCyberCafeName != nil {
		return *m.PwrdCyberCafeName
	}
	return ""
}

func (m *CSODOTALobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if m != nil {
		return m.DisabledRandomHeroBits
	}
	return nil
}

func (m *CSODOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CSODOTALobbyMember) GetCameraman() bool {
	if m != nil && m.Cameraman != nil {
		return *m.Cameraman
	}
	return false
}

func (m *CSODOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if m != nil {
		return m.CustomGameProductIds
	}
	return nil
}

func (m *CSODOTALobbyMember) GetSearchMatchType() MatchType {
	if m != nil && m.SearchMatchType != nil {
		return *m.SearchMatchType
	}
	return Default_CSODOTALobbyMember_SearchMatchType
}

func (m *CSODOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if m != nil && m.FavoriteTeamPacked != nil {
		return *m.FavoriteTeamPacked
	}
	return 0
}

func (m *CSODOTALobbyMember) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CSODOTALobbyMember) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CSODOTALobbyMember) GetCanEarnRewards() bool {
	if m != nil && m.CanEarnRewards != nil {
		return *m.CanEarnRewards
	}
	return false
}

func (m *CSODOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if m != nil && m.LiveSpectatorTeam != nil {
		return *m.LiveSpectatorTeam
	}
	return Default_CSODOTALobbyMember_LiveSpectatorTeam
}

func (m *CSODOTALobbyMember) GetWasMvpLastGame() bool {
	if m != nil && m.WasMvpLastGame != nil {
		return *m.WasMvpLastGame
	}
	return false
}

func (m *CSODOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwards
	}
	return nil
}

func (m *CSODOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwardsOnVictory
	}
	return nil
}

func (m *CSODOTALobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if m != nil && m.RankMmrBoostType != nil {
		return *m.RankMmrBoostType
	}
	return Default_CSODOTALobbyMember_RankMmrBoostType
}

func (m *CSODOTALobbyMember) GetQueuePointAdjustment() int32 {
	if m != nil && m.QueuePointAdjustment != nil {
		return *m.QueuePointAdjustment
	}
	return 0
}

func (m *CSODOTALobbyMember) GetRankTier() int32 {
	if m != nil && m.RankTier != nil {
		return *m.RankTier
	}
	return 0
}

func (m *CSODOTALobbyMember) GetTitle() uint32 {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return 0
}

func (m *CSODOTALobbyMember) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetReportsAvailable() uint32 {
	if m != nil && m.ReportsAvailable != nil {
		return *m.ReportsAvailable
	}
	return 0
}

func (m *CSODOTALobbyMember) GetIsSteamChina() bool {
	if m != nil && m.IsSteamChina != nil {
		return *m.IsSteamChina
	}
	return false
}

func (m *CSODOTALobbyMember) GetLiveSpectatorAccountId() uint32 {
	if m != nil && m.LiveSpectatorAccountId != nil {
		return *m.LiveSpectatorAccountId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetCommsReportsAvailable() uint32 {
	if m != nil && m.CommsReportsAvailable != nil {
		return *m.CommsReportsAvailable
	}
	return 0
}

type CSODOTAServerLobbyMember struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAServerLobbyMember) Reset()         { *m = CSODOTAServerLobbyMember{} }
func (m *CSODOTAServerLobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAServerLobbyMember) ProtoMessage()    {}
func (*CSODOTAServerLobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{6}
}

func (m *CSODOTAServerLobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAServerLobbyMember.Unmarshal(m, b)
}
func (m *CSODOTAServerLobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAServerLobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAServerLobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAServerLobbyMember.Merge(m, src)
}
func (m *CSODOTAServerLobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAServerLobbyMember.Size(m)
}
func (m *CSODOTAServerLobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAServerLobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAServerLobbyMember proto.InternalMessageInfo

type CSODOTAStaticLobbyMember struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAStaticLobbyMember) Reset()         { *m = CSODOTAStaticLobbyMember{} }
func (m *CSODOTAStaticLobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAStaticLobbyMember) ProtoMessage()    {}
func (*CSODOTAStaticLobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{7}
}

func (m *CSODOTAStaticLobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAStaticLobbyMember.Unmarshal(m, b)
}
func (m *CSODOTAStaticLobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAStaticLobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAStaticLobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAStaticLobbyMember.Merge(m, src)
}
func (m *CSODOTAStaticLobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAStaticLobbyMember.Size(m)
}
func (m *CSODOTAStaticLobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAStaticLobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAStaticLobbyMember proto.InternalMessageInfo

type CSODOTAServerStaticLobbyMember struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAServerStaticLobbyMember) Reset()         { *m = CSODOTAServerStaticLobbyMember{} }
func (m *CSODOTAServerStaticLobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAServerStaticLobbyMember) ProtoMessage()    {}
func (*CSODOTAServerStaticLobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{8}
}

func (m *CSODOTAServerStaticLobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAServerStaticLobbyMember.Unmarshal(m, b)
}
func (m *CSODOTAServerStaticLobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAServerStaticLobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAServerStaticLobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAServerStaticLobbyMember.Merge(m, src)
}
func (m *CSODOTAServerStaticLobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAServerStaticLobbyMember.Size(m)
}
func (m *CSODOTAServerStaticLobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAServerStaticLobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAServerStaticLobbyMember proto.InternalMessageInfo

type CLobbyTeamDetails struct {
	TeamName                   *string  `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string  `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64  `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64  `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64  `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool    `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	Rank                       *uint32  `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32   `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool    `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool    `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64  `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
	TeamLogoUrl                *string  `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	TeamAbbreviation           *string  `protobuf:"bytes,21,opt,name=team_abbreviation,json=teamAbbreviation" json:"team_abbreviation,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()         { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()    {}
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{9}
}

func (m *CLobbyTeamDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTeamDetails.Unmarshal(m, b)
}
func (m *CLobbyTeamDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTeamDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTeamDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTeamDetails.Merge(m, src)
}
func (m *CLobbyTeamDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTeamDetails.Size(m)
}
func (m *CLobbyTeamDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTeamDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTeamDetails proto.InternalMessageInfo

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if m != nil && m.IsHomeTeam != nil {
		return *m.IsHomeTeam
	}
	return false
}

func (m *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if m != nil && m.ChallengeMatchTokenAccount != nil {
		return *m.ChallengeMatchTokenAccount
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamAbbreviation() string {
	if m != nil && m.TeamAbbreviation != nil {
		return *m.TeamAbbreviation
	}
	return ""
}

type CLobbyGuildDetails struct {
	GuildId               *uint32       `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildPrimaryColor     *uint32       `protobuf:"varint,2,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor   *uint32       `protobuf:"varint,3,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern          *uint32       `protobuf:"varint,4,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildLogo             *uint64       `protobuf:"varint,5,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPoints           *uint32       `protobuf:"varint,6,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildEvent            *uint32       `protobuf:"varint,7,opt,name=guild_event,json=guildEvent" json:"guild_event,omitempty"`
	GuildFlags            *uint32       `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	TeamForGuild          *DOTA_GC_TEAM `protobuf:"varint,9,opt,name=team_for_guild,json=teamForGuild,enum=protocol.DOTA_GC_TEAM,def=0" json:"team_for_guild,omitempty"`
	GuildTag              *string       `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	GuildWeeklyPercentile *uint32       `protobuf:"varint,11,opt,name=guild_weekly_percentile,json=guildWeeklyPercentile" json:"guild_weekly_percentile,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *CLobbyGuildDetails) Reset()         { *m = CLobbyGuildDetails{} }
func (m *CLobbyGuildDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyGuildDetails) ProtoMessage()    {}
func (*CLobbyGuildDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{10}
}

func (m *CLobbyGuildDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyGuildDetails.Unmarshal(m, b)
}
func (m *CLobbyGuildDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyGuildDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyGuildDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyGuildDetails.Merge(m, src)
}
func (m *CLobbyGuildDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyGuildDetails.Size(m)
}
func (m *CLobbyGuildDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyGuildDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyGuildDetails proto.InternalMessageInfo

const Default_CLobbyGuildDetails_TeamForGuild DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CLobbyGuildDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPrimaryColor() uint32 {
	if m != nil && m.GuildPrimaryColor != nil {
		return *m.GuildPrimaryColor
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildSecondaryColor() uint32 {
	if m != nil && m.GuildSecondaryColor != nil {
		return *m.GuildSecondaryColor
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPattern() uint32 {
	if m != nil && m.GuildPattern != nil {
		return *m.GuildPattern
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPoints() uint32 {
	if m != nil && m.GuildPoints != nil {
		return *m.GuildPoints
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildEvent() uint32 {
	if m != nil && m.GuildEvent != nil {
		return *m.GuildEvent
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildFlags() uint32 {
	if m != nil && m.GuildFlags != nil {
		return *m.GuildFlags
	}
	return 0
}

func (m *CLobbyGuildDetails) GetTeamForGuild() DOTA_GC_TEAM {
	if m != nil && m.TeamForGuild != nil {
		return *m.TeamForGuild
	}
	return Default_CLobbyGuildDetails_TeamForGuild
}

func (m *CLobbyGuildDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyGuildDetails) GetGuildWeeklyPercentile() uint32 {
	if m != nil && m.GuildWeeklyPercentile != nil {
		return *m.GuildWeeklyPercentile
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex         *uint32  `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate        *bool    `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop          *bool    `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId            *uint32  `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin               *uint32  `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()         { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()    {}
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{11}
}

func (m *CLobbyTimedRewardDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Unmarshal(m, b)
}
func (m *CLobbyTimedRewardDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTimedRewardDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTimedRewardDetails.Merge(m, src)
}
func (m *CLobbyTimedRewardDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Size(m)
}
func (m *CLobbyTimedRewardDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTimedRewardDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTimedRewardDetails proto.InternalMessageInfo

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId            *uint32  `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode          *string  `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description          *string  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode         *string  `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()         { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()    {}
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{12}
}

func (m *CLobbyBroadcastChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Unmarshal(m, b)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Marshal(b, m, deterministic)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.Merge(m, src)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Size() int {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Size(m)
}
func (m *CLobbyBroadcastChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyBroadcastChannelInfo proto.InternalMessageInfo

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CLobbyGuildChallenge struct {
	GuildId                  *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                  *EEvent  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId      *uint32  `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter       *uint32  `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp       *uint32  `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengePeriodSerial    *uint32  `protobuf:"varint,6,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	ChallengeProgressAtStart *uint32  `protobuf:"varint,7,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	EligibleAccountIds       []uint32 `protobuf:"varint,8,rep,name=eligible_account_ids,json=eligibleAccountIds" json:"eligible_account_ids,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CLobbyGuildChallenge) Reset()         { *m = CLobbyGuildChallenge{} }
func (m *CLobbyGuildChallenge) String() string { return proto.CompactTextString(m) }
func (*CLobbyGuildChallenge) ProtoMessage()    {}
func (*CLobbyGuildChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{13}
}

func (m *CLobbyGuildChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyGuildChallenge.Unmarshal(m, b)
}
func (m *CLobbyGuildChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyGuildChallenge.Marshal(b, m, deterministic)
}
func (m *CLobbyGuildChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyGuildChallenge.Merge(m, src)
}
func (m *CLobbyGuildChallenge) XXX_Size() int {
	return xxx_messageInfo_CLobbyGuildChallenge.Size(m)
}
func (m *CLobbyGuildChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyGuildChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyGuildChallenge proto.InternalMessageInfo

const Default_CLobbyGuildChallenge_EventId EEvent = EEvent_EVENT_ID_NONE

func (m *CLobbyGuildChallenge) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetEventId() EEvent {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return Default_CLobbyGuildChallenge_EventId
}

func (m *CLobbyGuildChallenge) GetChallengeInstanceId() uint32 {
	if m != nil && m.ChallengeInstanceId != nil {
		return *m.ChallengeInstanceId
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeParameter() uint32 {
	if m != nil && m.ChallengeParameter != nil {
		return *m.ChallengeParameter
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeTimestamp() uint32 {
	if m != nil && m.ChallengeTimestamp != nil {
		return *m.ChallengeTimestamp
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengePeriodSerial() uint32 {
	if m != nil && m.ChallengePeriodSerial != nil {
		return *m.ChallengePeriodSerial
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeProgressAtStart() uint32 {
	if m != nil && m.ChallengeProgressAtStart != nil {
		return *m.ChallengeProgressAtStart
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetEligibleAccountIds() []uint32 {
	if m != nil {
		return m.EligibleAccountIds
	}
	return nil
}

type CSODOTALobby struct {
	LobbyId                                    *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AllMembers                                 []*CSODOTALobbyMember          `protobuf:"bytes,120,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	MemberIndices                              []uint32                       `protobuf:"varint,121,rep,name=member_indices,json=memberIndices" json:"member_indices,omitempty"`
	LeftMemberIndices                          []uint32                       `protobuf:"varint,122,rep,name=left_member_indices,json=leftMemberIndices" json:"left_member_indices,omitempty"`
	FreeMemberIndices                          []uint32                       `protobuf:"varint,123,rep,name=free_member_indices,json=freeMemberIndices" json:"free_member_indices,omitempty"`
	LeaderId                                   *uint64                        `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                        `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                        `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                       `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State            `protobuf:"varint,4,opt,name=state,enum=protocol.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                        `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType        `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=protocol.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                          `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                          `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                          `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                        `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails           `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                        `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                        `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                        `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                        `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState                `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=protocol.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                        `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                        `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                  `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=protocol.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                        `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                          `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty             `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=protocol.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails    `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                        `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                        `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                        `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                        `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                        `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                        `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                        `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                        `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                        `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                        `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                          `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay              `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=protocol.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                        `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                        `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                        `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                          `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo  `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                        `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                        `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                          `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg      `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame                 `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                          `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                 `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=protocol.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                          `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                        `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                        `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                        `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	Visibility                                 *DOTALobbyVisibility           `protobuf:"varint,75,opt,name=visibility,enum=protocol.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                        `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                          `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                        `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                       `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                        `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	GameStartTime                              *uint32                        `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting         `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=protocol.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	WeekendTourneyDivisionId                   *uint32                        `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                        `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                        `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty             `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=protocol.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                        `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                        `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                       `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=protocol.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules    `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=protocol.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                        `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                        `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice   `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=protocol.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice   `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=protocol.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                          `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                        `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=protocol.EEvent,def=0" json:"current_primary_event,omitempty"`
	EmergencyDisabledHeroIds                   []uint32                       `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                        `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                          `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	LanHostPingLocation                        *string                        `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                        `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                        `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	LeaguePhase                                *uint32                        `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	RecordDetailedStats                        *bool                          `protobuf:"varint,114,opt,name=record_detailed_stats,json=recordDetailedStats" json:"record_detailed_stats,omitempty"`
	ExperimentalGameplayEnabled                *bool                          `protobuf:"varint,116,opt,name=experimental_gameplay_enabled,json=experimentalGameplayEnabled" json:"experimental_gameplay_enabled,omitempty"`
	GuildChallenges                            []*CLobbyGuildChallenge        `protobuf:"bytes,117,rep,name=guild_challenges,json=guildChallenges" json:"guild_challenges,omitempty"`
	GuildDetails                               []*CLobbyGuildDetails          `protobuf:"bytes,118,rep,name=guild_details,json=guildDetails" json:"guild_details,omitempty"`
	LobbyEventPoints                           []*CMsgLobbyEventPoints        `protobuf:"bytes,119,rep,name=lobby_event_points,json=lobbyEventPoints" json:"lobby_event_points,omitempty"`
	RequestedHeroIds                           []uint32                       `protobuf:"varint,124,rep,name=requested_hero_ids,json=requestedHeroIds" json:"requested_hero_ids,omitempty"`
	CoachFriendRequests                        []*CMsgLobbyCoachFriendRequest `protobuf:"bytes,125,rep,name=coach_friend_requests,json=coachFriendRequests" json:"coach_friend_requests,omitempty"`
	IsInSteamChina                             *bool                          `protobuf:"varint,126,opt,name=is_in_steam_china,json=isInSteamChina" json:"is_in_steam_china,omitempty"`
	WithScenarioSave                           *bool                          `protobuf:"varint,127,opt,name=with_scenario_save,json=withScenarioSave" json:"with_scenario_save,omitempty"`
	LobbyCreationTime                          *uint32                        `protobuf:"varint,128,opt,name=lobby_creation_time,json=lobbyCreationTime" json:"lobby_creation_time,omitempty"`
	EventGameDefinition                        *string                        `protobuf:"bytes,129,opt,name=event_game_definition,json=eventGameDefinition" json:"event_game_definition,omitempty"`
	ExtraStartupMessages                       []*CSODOTALobby_CExtraMsg      `protobuf:"bytes,130,rep,name=extra_startup_messages,json=extraStartupMessages" json:"extra_startup_messages,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{}                       `json:"-"`
	XXX_unrecognized                           []byte                         `json:"-"`
	XXX_sizecache                              int32                          `json:"-"`
}

func (m *CSODOTALobby) Reset()         { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()    {}
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{14}
}

func (m *CSODOTALobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby.Unmarshal(m, b)
}
func (m *CSODOTALobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby.Merge(m, src)
}
func (m *CSODOTALobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby.Size(m)
}
func (m *CSODOTALobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby proto.InternalMessageInfo

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10
const Default_CSODOTALobby_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
const Default_CSODOTALobby_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CSODOTALobby_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
const Default_CSODOTALobby_BotDifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_SelectionPriorityRules DOTASelectionPriorityRules = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
const Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_CurrentPrimaryEvent EEvent = EEvent_EVENT_ID_NONE

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetAllMembers() []*CSODOTALobbyMember {
	if m != nil {
		return m.AllMembers
	}
	return nil
}

func (m *CSODOTALobby) GetMemberIndices() []uint32 {
	if m != nil {
		return m.MemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMemberIndices() []uint32 {
	if m != nil {
		return m.LeftMemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetFreeMemberIndices() []uint32 {
	if m != nil {
		return m.FreeMemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.BotDifficultyRadiant != nil {
		return *m.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (m *CSODOTALobby) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if m != nil && m.CustomGameAutoCreatedLobby != nil {
		return *m.CustomGameAutoCreatedLobby
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if m != nil {
		return m.PreviousSeriesMatches
	}
	return nil
}

func (m *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CSODOTALobby) GetGameStartTime() uint32 {
	if m != nil && m.GameStartTime != nil {
		return *m.GameStartTime
	}
	return 0
}

func (m *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (m *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if m != nil && m.WeekendTourneyDivisionId != nil {
		return *m.WeekendTourneyDivisionId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if m != nil && m.WeekendTourneyBracketRound != nil {
		return *m.WeekendTourneyBracketRound
	}
	return 0
}

func (m *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if m != nil && m.BotDifficultyDire != nil {
		return *m.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (m *CSODOTALobby) GetBotRadiant() uint64 {
	if m != nil && m.BotRadiant != nil {
		return *m.BotRadiant
	}
	return 0
}

func (m *CSODOTALobby) GetBotDire() uint64 {
	if m != nil && m.BotDire != nil {
		return *m.BotDire
	}
	return 0
}

func (m *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if m != nil {
		return m.EventProgressionEnabled
	}
	return nil
}

func (m *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if m != nil && m.SelectionPriorityRules != nil {
		return *m.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (m *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesPreviousSelectionPriorityTeamId != nil {
		return *m.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesCurrentSelectionPriorityTeamId != nil {
		return *m.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentPriorityTeamChoice != nil {
		return *m.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentNonPriorityTeamChoice != nil {
		return *m.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if m != nil && m.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *m.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (m *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if m != nil && m.CurrentPrimaryEvent != nil {
		return *m.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (m *CSODOTALobby) GetEmergencyDisabledHeroIds() []uint32 {
	if m != nil {
		return m.EmergencyDisabledHeroIds
	}
	return nil
}

func (m *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if m != nil && m.CustomGamePrivateKey != nil {
		return *m.CustomGamePrivateKey
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGamePenalties() bool {
	if m != nil && m.CustomGamePenalties != nil {
		return *m.CustomGamePenalties
	}
	return false
}

func (m *CSODOTALobby) GetLanHostPingLocation() string {
	if m != nil && m.LanHostPingLocation != nil {
		return *m.LanHostPingLocation
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueNodeId() uint32 {
	if m != nil && m.LeagueNodeId != nil {
		return *m.LeagueNodeId
	}
	return 0
}

func (m *CSODOTALobby) GetMatchDuration() uint32 {
	if m != nil && m.MatchDuration != nil {
		return *m.MatchDuration
	}
	return 0
}

func (m *CSODOTALobby) GetLeaguePhase() uint32 {
	if m != nil && m.LeaguePhase != nil {
		return *m.LeaguePhase
	}
	return 0
}

func (m *CSODOTALobby) GetRecordDetailedStats() bool {
	if m != nil && m.RecordDetailedStats != nil {
		return *m.RecordDetailedStats
	}
	return false
}

func (m *CSODOTALobby) GetExperimentalGameplayEnabled() bool {
	if m != nil && m.ExperimentalGameplayEnabled != nil {
		return *m.ExperimentalGameplayEnabled
	}
	return false
}

func (m *CSODOTALobby) GetGuildChallenges() []*CLobbyGuildChallenge {
	if m != nil {
		return m.GuildChallenges
	}
	return nil
}

func (m *CSODOTALobby) GetGuildDetails() []*CLobbyGuildDetails {
	if m != nil {
		return m.GuildDetails
	}
	return nil
}

func (m *CSODOTALobby) GetLobbyEventPoints() []*CMsgLobbyEventPoints {
	if m != nil {
		return m.LobbyEventPoints
	}
	return nil
}

func (m *CSODOTALobby) GetRequestedHeroIds() []uint32 {
	if m != nil {
		return m.RequestedHeroIds
	}
	return nil
}

func (m *CSODOTALobby) GetCoachFriendRequests() []*CMsgLobbyCoachFriendRequest {
	if m != nil {
		return m.CoachFriendRequests
	}
	return nil
}

func (m *CSODOTALobby) GetIsInSteamChina() bool {
	if m != nil && m.IsInSteamChina != nil {
		return *m.IsInSteamChina
	}
	return false
}

func (m *CSODOTALobby) GetWithScenarioSave() bool {
	if m != nil && m.WithScenarioSave != nil {
		return *m.WithScenarioSave
	}
	return false
}

func (m *CSODOTALobby) GetLobbyCreationTime() uint32 {
	if m != nil && m.LobbyCreationTime != nil {
		return *m.LobbyCreationTime
	}
	return 0
}

func (m *CSODOTALobby) GetEventGameDefinition() string {
	if m != nil && m.EventGameDefinition != nil {
		return *m.EventGameDefinition
	}
	return ""
}

func (m *CSODOTALobby) GetExtraStartupMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraStartupMessages
	}
	return nil
}

type CSODOTALobby_CExtraMsg struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()         { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()    {}
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{14, 0}
}

func (m *CSODOTALobby_CExtraMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Unmarshal(m, b)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.Merge(m, src)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Size(m)
}
func (m *CSODOTALobby_CExtraMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby_CExtraMsg proto.InternalMessageInfo

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CSODOTAServerLobby struct {
	AllMembers           []*CSODOTAServerLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CSODOTAServerLobby) Reset()         { *m = CSODOTAServerLobby{} }
func (m *CSODOTAServerLobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTAServerLobby) ProtoMessage()    {}
func (*CSODOTAServerLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{15}
}

func (m *CSODOTAServerLobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAServerLobby.Unmarshal(m, b)
}
func (m *CSODOTAServerLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAServerLobby.Marshal(b, m, deterministic)
}
func (m *CSODOTAServerLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAServerLobby.Merge(m, src)
}
func (m *CSODOTAServerLobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTAServerLobby.Size(m)
}
func (m *CSODOTAServerLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAServerLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAServerLobby proto.InternalMessageInfo

func (m *CSODOTAServerLobby) GetAllMembers() []*CSODOTAServerLobbyMember {
	if m != nil {
		return m.AllMembers
	}
	return nil
}

type CSODOTAStaticLobby struct {
	AllMembers           []*CSODOTAStaticLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	IsPlayerDraft        *bool                       `protobuf:"varint,2,opt,name=is_player_draft,json=isPlayerDraft" json:"is_player_draft,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CSODOTAStaticLobby) Reset()         { *m = CSODOTAStaticLobby{} }
func (m *CSODOTAStaticLobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTAStaticLobby) ProtoMessage()    {}
func (*CSODOTAStaticLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{16}
}

func (m *CSODOTAStaticLobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAStaticLobby.Unmarshal(m, b)
}
func (m *CSODOTAStaticLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAStaticLobby.Marshal(b, m, deterministic)
}
func (m *CSODOTAStaticLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAStaticLobby.Merge(m, src)
}
func (m *CSODOTAStaticLobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTAStaticLobby.Size(m)
}
func (m *CSODOTAStaticLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAStaticLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAStaticLobby proto.InternalMessageInfo

func (m *CSODOTAStaticLobby) GetAllMembers() []*CSODOTAStaticLobbyMember {
	if m != nil {
		return m.AllMembers
	}
	return nil
}

func (m *CSODOTAStaticLobby) GetIsPlayerDraft() bool {
	if m != nil && m.IsPlayerDraft != nil {
		return *m.IsPlayerDraft
	}
	return false
}

type CSODOTAServerStaticLobby struct {
	AllMembers           []*CSODOTAServerStaticLobbyMember `protobuf:"bytes,1,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTAServerStaticLobby) Reset()         { *m = CSODOTAServerStaticLobby{} }
func (m *CSODOTAServerStaticLobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTAServerStaticLobby) ProtoMessage()    {}
func (*CSODOTAServerStaticLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{17}
}

func (m *CSODOTAServerStaticLobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAServerStaticLobby.Unmarshal(m, b)
}
func (m *CSODOTAServerStaticLobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAServerStaticLobby.Marshal(b, m, deterministic)
}
func (m *CSODOTAServerStaticLobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAServerStaticLobby.Merge(m, src)
}
func (m *CSODOTAServerStaticLobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTAServerStaticLobby.Size(m)
}
func (m *CSODOTAServerStaticLobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAServerStaticLobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAServerStaticLobby proto.InternalMessageInfo

func (m *CSODOTAServerStaticLobby) GetAllMembers() []*CSODOTAServerStaticLobbyMember {
	if m != nil {
		return m.AllMembers
	}
	return nil
}

type CMsgAdditionalLobbyStartupAccountData struct {
	AccountId                      *uint32                                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlusData                       *CMsgLobbyPlayerPlusSubscriptionData                           `protobuf:"bytes,2,opt,name=plus_data,json=plusData" json:"plus_data,omitempty"`
	UnlockedChatWheelMessageRanges []*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange `protobuf:"bytes,3,rep,name=unlocked_chat_wheel_message_ranges,json=unlockedChatWheelMessageRanges" json:"unlocked_chat_wheel_message_ranges,omitempty"`
	UnlockedPingWheelMessageRanges []*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange `protobuf:"bytes,4,rep,name=unlocked_ping_wheel_message_ranges,json=unlockedPingWheelMessageRanges" json:"unlocked_ping_wheel_message_ranges,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                                                       `json:"-"`
	XXX_unrecognized               []byte                                                         `json:"-"`
	XXX_sizecache                  int32                                                          `json:"-"`
}

func (m *CMsgAdditionalLobbyStartupAccountData) Reset()         { *m = CMsgAdditionalLobbyStartupAccountData{} }
func (m *CMsgAdditionalLobbyStartupAccountData) String() string { return proto.CompactTextString(m) }
func (*CMsgAdditionalLobbyStartupAccountData) ProtoMessage()    {}
func (*CMsgAdditionalLobbyStartupAccountData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{18}
}

func (m *CMsgAdditionalLobbyStartupAccountData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData.Unmarshal(m, b)
}
func (m *CMsgAdditionalLobbyStartupAccountData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData.Marshal(b, m, deterministic)
}
func (m *CMsgAdditionalLobbyStartupAccountData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData.Merge(m, src)
}
func (m *CMsgAdditionalLobbyStartupAccountData) XXX_Size() int {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData.Size(m)
}
func (m *CMsgAdditionalLobbyStartupAccountData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData proto.InternalMessageInfo

func (m *CMsgAdditionalLobbyStartupAccountData) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgAdditionalLobbyStartupAccountData) GetPlusData() *CMsgLobbyPlayerPlusSubscriptionData {
	if m != nil {
		return m.PlusData
	}
	return nil
}

func (m *CMsgAdditionalLobbyStartupAccountData) GetUnlockedChatWheelMessageRanges() []*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange {
	if m != nil {
		return m.UnlockedChatWheelMessageRanges
	}
	return nil
}

func (m *CMsgAdditionalLobbyStartupAccountData) GetUnlockedPingWheelMessageRanges() []*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange {
	if m != nil {
		return m.UnlockedPingWheelMessageRanges
	}
	return nil
}

type CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange struct {
	MessageIdStart       *uint32  `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart,def=4294967295" json:"message_id_start,omitempty"`
	MessageIdEnd         *uint32  `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd,def=4294967295" json:"message_id_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) Reset() {
	*m = CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange{}
}
func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) ProtoMessage() {}
func (*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{18, 0}
}

func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.Unmarshal(m, b)
}
func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.Marshal(b, m, deterministic)
}
func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.Merge(m, src)
}
func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) XXX_Size() int {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.Size(m)
}
func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange proto.InternalMessageInfo

const Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdStart uint32 = 4294967295
const Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdEnd uint32 = 4294967295

func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) GetMessageIdStart() uint32 {
	if m != nil && m.MessageIdStart != nil {
		return *m.MessageIdStart
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdStart
}

func (m *CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange) GetMessageIdEnd() uint32 {
	if m != nil && m.MessageIdEnd != nil {
		return *m.MessageIdEnd
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_MessageIdEnd
}

type CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange struct {
	MessageIdStart       *uint32  `protobuf:"varint,1,opt,name=message_id_start,json=messageIdStart,def=4294967295" json:"message_id_start,omitempty"`
	MessageIdEnd         *uint32  `protobuf:"varint,2,opt,name=message_id_end,json=messageIdEnd,def=4294967295" json:"message_id_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) Reset() {
	*m = CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange{}
}
func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) ProtoMessage() {}
func (*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{18, 1}
}

func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.Unmarshal(m, b)
}
func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.Marshal(b, m, deterministic)
}
func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.Merge(m, src)
}
func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) XXX_Size() int {
	return xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.Size(m)
}
func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange proto.InternalMessageInfo

const Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdStart uint32 = 4294967295
const Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdEnd uint32 = 4294967295

func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) GetMessageIdStart() uint32 {
	if m != nil && m.MessageIdStart != nil {
		return *m.MessageIdStart
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdStart
}

func (m *CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange) GetMessageIdEnd() uint32 {
	if m != nil && m.MessageIdEnd != nil {
		return *m.MessageIdEnd
	}
	return Default_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_MessageIdEnd
}

type CMsgLobbyInitializationComplete struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyInitializationComplete) Reset()         { *m = CMsgLobbyInitializationComplete{} }
func (m *CMsgLobbyInitializationComplete) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyInitializationComplete) ProtoMessage()    {}
func (*CMsgLobbyInitializationComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{19}
}

func (m *CMsgLobbyInitializationComplete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyInitializationComplete.Unmarshal(m, b)
}
func (m *CMsgLobbyInitializationComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyInitializationComplete.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyInitializationComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyInitializationComplete.Merge(m, src)
}
func (m *CMsgLobbyInitializationComplete) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyInitializationComplete.Size(m)
}
func (m *CMsgLobbyInitializationComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyInitializationComplete.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyInitializationComplete proto.InternalMessageInfo

type CMsgLobbyPlaytestDetails struct {
	Json                 *string  `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyPlaytestDetails) Reset()         { *m = CMsgLobbyPlaytestDetails{} }
func (m *CMsgLobbyPlaytestDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyPlaytestDetails) ProtoMessage()    {}
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{20}
}

func (m *CMsgLobbyPlaytestDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Unmarshal(m, b)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.Merge(m, src)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Size(m)
}
func (m *CMsgLobbyPlaytestDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlaytestDetails proto.InternalMessageInfo

func (m *CMsgLobbyPlaytestDetails) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

type CMsgLocalServerGuildData struct {
	GuildId               *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId               *EEvent  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	GuildPoints           *uint32  `protobuf:"varint,3,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildLogo             *uint64  `protobuf:"varint,4,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPrimaryColor     *uint32  `protobuf:"varint,5,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor   *uint32  `protobuf:"varint,6,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern          *uint32  `protobuf:"varint,7,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildFlags            *uint32  `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	GuildWeeklyPercentile *uint32  `protobuf:"varint,9,opt,name=guild_weekly_percentile,json=guildWeeklyPercentile" json:"guild_weekly_percentile,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CMsgLocalServerGuildData) Reset()         { *m = CMsgLocalServerGuildData{} }
func (m *CMsgLocalServerGuildData) String() string { return proto.CompactTextString(m) }
func (*CMsgLocalServerGuildData) ProtoMessage()    {}
func (*CMsgLocalServerGuildData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{21}
}

func (m *CMsgLocalServerGuildData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLocalServerGuildData.Unmarshal(m, b)
}
func (m *CMsgLocalServerGuildData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLocalServerGuildData.Marshal(b, m, deterministic)
}
func (m *CMsgLocalServerGuildData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLocalServerGuildData.Merge(m, src)
}
func (m *CMsgLocalServerGuildData) XXX_Size() int {
	return xxx_messageInfo_CMsgLocalServerGuildData.Size(m)
}
func (m *CMsgLocalServerGuildData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLocalServerGuildData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLocalServerGuildData proto.InternalMessageInfo

const Default_CMsgLocalServerGuildData_EventId EEvent = EEvent_EVENT_ID_NONE

func (m *CMsgLocalServerGuildData) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetEventId() EEvent {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return Default_CMsgLocalServerGuildData_EventId
}

func (m *CMsgLocalServerGuildData) GetGuildPoints() uint32 {
	if m != nil && m.GuildPoints != nil {
		return *m.GuildPoints
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildPrimaryColor() uint32 {
	if m != nil && m.GuildPrimaryColor != nil {
		return *m.GuildPrimaryColor
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildSecondaryColor() uint32 {
	if m != nil && m.GuildSecondaryColor != nil {
		return *m.GuildSecondaryColor
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildPattern() uint32 {
	if m != nil && m.GuildPattern != nil {
		return *m.GuildPattern
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildFlags() uint32 {
	if m != nil && m.GuildFlags != nil {
		return *m.GuildFlags
	}
	return 0
}

func (m *CMsgLocalServerGuildData) GetGuildWeeklyPercentile() uint32 {
	if m != nil && m.GuildWeeklyPercentile != nil {
		return *m.GuildWeeklyPercentile
	}
	return 0
}

type CMsgLocalServerFakeLobbyData struct {
	AccountId            *uint32                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventPoints          []*CMsgLobbyEventPoints                `protobuf:"bytes,2,rep,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	IsPlusSubscriber     *bool                                  `protobuf:"varint,3,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	PrimaryEventId       *uint32                                `protobuf:"varint,4,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	FavoriteTeam         *uint32                                `protobuf:"varint,5,opt,name=favorite_team,json=favoriteTeam" json:"favorite_team,omitempty"`
	FavoriteTeamQuality  *uint32                                `protobuf:"varint,6,opt,name=favorite_team_quality,json=favoriteTeamQuality" json:"favorite_team_quality,omitempty"`
	GuildInfo            *CMsgLocalServerGuildData              `protobuf:"bytes,7,opt,name=guild_info,json=guildInfo" json:"guild_info,omitempty"`
	TeleportFxLevel      *uint32                                `protobuf:"varint,8,opt,name=teleport_fx_level,json=teleportFxLevel" json:"teleport_fx_level,omitempty"`
	AdditionalData       *CMsgAdditionalLobbyStartupAccountData `protobuf:"bytes,9,opt,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CMsgLocalServerFakeLobbyData) Reset()         { *m = CMsgLocalServerFakeLobbyData{} }
func (m *CMsgLocalServerFakeLobbyData) String() string { return proto.CompactTextString(m) }
func (*CMsgLocalServerFakeLobbyData) ProtoMessage()    {}
func (*CMsgLocalServerFakeLobbyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c95263108a4fd02c, []int{22}
}

func (m *CMsgLocalServerFakeLobbyData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Unmarshal(m, b)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Marshal(b, m, deterministic)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLocalServerFakeLobbyData.Merge(m, src)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_Size() int {
	return xxx_messageInfo_CMsgLocalServerFakeLobbyData.Size(m)
}
func (m *CMsgLocalServerFakeLobbyData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLocalServerFakeLobbyData.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLocalServerFakeLobbyData proto.InternalMessageInfo

func (m *CMsgLocalServerFakeLobbyData) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetEventPoints() []*CMsgLobbyEventPoints {
	if m != nil {
		return m.EventPoints
	}
	return nil
}

func (m *CMsgLocalServerFakeLobbyData) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CMsgLocalServerFakeLobbyData) GetPrimaryEventId() uint32 {
	if m != nil && m.PrimaryEventId != nil {
		return *m.PrimaryEventId
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetFavoriteTeam() uint32 {
	if m != nil && m.FavoriteTeam != nil {
		return *m.FavoriteTeam
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetFavoriteTeamQuality() uint32 {
	if m != nil && m.FavoriteTeamQuality != nil {
		return *m.FavoriteTeamQuality
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetGuildInfo() *CMsgLocalServerGuildData {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

func (m *CMsgLocalServerFakeLobbyData) GetTeleportFxLevel() uint32 {
	if m != nil && m.TeleportFxLevel != nil {
		return *m.TeleportFxLevel
	}
	return 0
}

func (m *CMsgLocalServerFakeLobbyData) GetAdditionalData() *CMsgAdditionalLobbyStartupAccountData {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

func init() {
	proto.RegisterEnum("protocol.ELobbyMemberCoachRequestState", ELobbyMemberCoachRequestState_name, ELobbyMemberCoachRequestState_value)
	proto.RegisterEnum("protocol.LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("protocol.LobbyDotaPauseSetting", LobbyDotaPauseSetting_name, LobbyDotaPauseSetting_value)
	proto.RegisterEnum("protocol.CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("protocol.CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
	proto.RegisterType((*CMsgLobbyCoachFriendRequest)(nil), "protocol.CMsgLobbyCoachFriendRequest")
	proto.RegisterType((*CMsgLobbyPlayerPlusSubscriptionData)(nil), "protocol.CMsgLobbyPlayerPlusSubscriptionData")
	proto.RegisterType((*CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)(nil), "protocol.CMsgLobbyPlayerPlusSubscriptionData.HeroBadge")
	proto.RegisterType((*CMsgLobbyEventPoints)(nil), "protocol.CMsgLobbyEventPoints")
	proto.RegisterType((*CMsgLobbyEventPoints_PeriodicResourceData)(nil), "protocol.CMsgLobbyEventPoints.PeriodicResourceData")
	proto.RegisterType((*CMsgLobbyEventPoints_NetworkedEventAction)(nil), "protocol.CMsgLobbyEventPoints.NetworkedEventAction")
	proto.RegisterType((*CMsgLobbyEventPoints_AccountPoints)(nil), "protocol.CMsgLobbyEventPoints.AccountPoints")
	proto.RegisterType((*CMsgLobbyEventGameData)(nil), "protocol.CMsgLobbyEventGameData")
	proto.RegisterType((*CSODOTALobbyInvite)(nil), "protocol.CSODOTALobbyInvite")
	proto.RegisterType((*CSODOTALobbyInvite_LobbyMember)(nil), "protocol.CSODOTALobbyInvite.LobbyMember")
	proto.RegisterType((*CSODOTALobbyMember)(nil), "protocol.CSODOTALobbyMember")
	proto.RegisterType((*CSODOTAServerLobbyMember)(nil), "protocol.CSODOTAServerLobbyMember")
	proto.RegisterType((*CSODOTAStaticLobbyMember)(nil), "protocol.CSODOTAStaticLobbyMember")
	proto.RegisterType((*CSODOTAServerStaticLobbyMember)(nil), "protocol.CSODOTAServerStaticLobbyMember")
	proto.RegisterType((*CLobbyTeamDetails)(nil), "protocol.CLobbyTeamDetails")
	proto.RegisterType((*CLobbyGuildDetails)(nil), "protocol.CLobbyGuildDetails")
	proto.RegisterType((*CLobbyTimedRewardDetails)(nil), "protocol.CLobbyTimedRewardDetails")
	proto.RegisterType((*CLobbyBroadcastChannelInfo)(nil), "protocol.CLobbyBroadcastChannelInfo")
	proto.RegisterType((*CLobbyGuildChallenge)(nil), "protocol.CLobbyGuildChallenge")
	proto.RegisterType((*CSODOTALobby)(nil), "protocol.CSODOTALobby")
	proto.RegisterType((*CSODOTALobby_CExtraMsg)(nil), "protocol.CSODOTALobby.CExtraMsg")
	proto.RegisterType((*CSODOTAServerLobby)(nil), "protocol.CSODOTAServerLobby")
	proto.RegisterType((*CSODOTAStaticLobby)(nil), "protocol.CSODOTAStaticLobby")
	proto.RegisterType((*CSODOTAServerStaticLobby)(nil), "protocol.CSODOTAServerStaticLobby")
	proto.RegisterType((*CMsgAdditionalLobbyStartupAccountData)(nil), "protocol.CMsgAdditionalLobbyStartupAccountData")
	proto.RegisterType((*CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange)(nil), "protocol.CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange")
	proto.RegisterType((*CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange)(nil), "protocol.CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange")
	proto.RegisterType((*CMsgLobbyInitializationComplete)(nil), "protocol.CMsgLobbyInitializationComplete")
	proto.RegisterType((*CMsgLobbyPlaytestDetails)(nil), "protocol.CMsgLobbyPlaytestDetails")
	proto.RegisterType((*CMsgLocalServerGuildData)(nil), "protocol.CMsgLocalServerGuildData")
	proto.RegisterType((*CMsgLocalServerFakeLobbyData)(nil), "protocol.CMsgLocalServerFakeLobbyData")
}

func init() {
	proto.RegisterFile("dota_gcmessages_common_lobby.proto", fileDescriptor_c95263108a4fd02c)
}

var fileDescriptor_c95263108a4fd02c = []byte{
	// 5615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7b, 0xcb, 0x77, 0x1b, 0xc7,
	0x95, 0xb7, 0x21, 0x52, 0x22, 0x59, 0x24, 0x48, 0xb0, 0x48, 0x51, 0x2d, 0xca, 0x12, 0x69, 0xc8,
	0xb2, 0x69, 0x59, 0xa1, 0x15, 0x59, 0x96, 0x3f, 0xf3, 0x8b, 0x93, 0x03, 0x02, 0x90, 0x84, 0x98,
	0x20, 0x91, 0x06, 0x28, 0x59, 0xc9, 0xf7, 0x4d, 0xa5, 0xd0, 0x5d, 0x04, 0xcb, 0xec, 0x07, 0x5c,
	0xd5, 0x20, 0xc5, 0xcc, 0x23, 0xc9, 0x64, 0x3b, 0xe7, 0xcc, 0x99, 0x45, 0x66, 0x31, 0xbb, 0x59,
	0x64, 0x56, 0x73, 0x4e, 0xfe, 0x81, 0xd9, 0xcd, 0x6a, 0xfe, 0x8d, 0xd9, 0xe4, 0x7f, 0x98, 0xcd,
	0xcc, 0xa9, 0x7b, 0xab, 0x1b, 0x0d, 0x10, 0x7a, 0xd8, 0xe7, 0x64, 0xb4, 0x11, 0xfa, 0x77, 0x6f,
	0xdd, 0x7a, 0xdd, 0xba, 0xaf, 0x2a, 0x92, 0xb2, 0x1f, 0x27, 0x9c, 0xf5, 0xbc, 0x50, 0x68, 0xcd,
	0x7b, 0x42, 0x33, 0x2f, 0x0e, 0xc3, 0x38, 0x62, 0x41, 0xdc, 0xed, 0x9e, 0x6f, 0xf7, 0x55, 0x9c,
	0xc4, 0x74, 0x16, 0xfe, 0xf3, 0xe2, 0x60, 0x7d, 0x45, 0x27, 0x82, 0x87, 0x29, 0x2f, 0x92, 0xd7,
	0xaf, 0x81, 0x08, 0x7d, 0xcc, 0x95, 0xf0, 0x99, 0x88, 0x06, 0xa1, 0x25, 0x94, 0xff, 0x54, 0x20,
	0x37, 0xaa, 0x4d, 0xdd, 0xdb, 0x33, 0xb2, 0xaa, 0x31, 0xf7, 0x8e, 0x1f, 0x2b, 0x29, 0x22, 0xdf,
	0x15, 0xdf, 0x0e, 0x84, 0x4e, 0xe8, 0x16, 0x29, 0x79, 0x06, 0x65, 0xdc, 0xf3, 0xe2, 0x41, 0x94,
	0x30, 0xe9, 0x3b, 0x85, 0xcd, 0xc2, 0x56, 0xd1, 0x5d, 0x04, 0xbc, 0x82, 0x70, 0xc3, 0xa7, 0x77,
	0xc9, 0x72, 0x3f, 0xe0, 0xe7, 0x42, 0xe5, 0x59, 0x2f, 0x01, 0xeb, 0x12, 0x12, 0x86, 0xbc, 0x8a,
	0x14, 0x15, 0x76, 0xc0, 0x74, 0xc2, 0x13, 0xe1, 0x4c, 0x6d, 0x16, 0xb6, 0x16, 0x1f, 0x7c, 0xb8,
	0x9d, 0xce, 0x62, 0xbb, 0x0e, 0x03, 0x6a, 0x8a, 0xb0, 0x2b, 0x14, 0x0c, 0xcb, 0x0e, 0xa8, 0x6d,
	0xd8, 0x77, 0xde, 0x3f, 0x61, 0xe2, 0x75, 0x0c, 0x6c, 0x3f, 0x8e, 0x84, 0xbb, 0xa0, 0x72, 0x50,
	0xf9, 0x3f, 0x0a, 0xe4, 0x76, 0x36, 0xd3, 0x16, 0x0c, 0xa8, 0x15, 0x0c, 0x74, 0x7b, 0xd0, 0xd5,
	0x9e, 0x92, 0xfd, 0x44, 0xc6, 0x51, 0x8d, 0x27, 0x9c, 0x7e, 0x4d, 0xe6, 0x8f, 0x85, 0x8a, 0x59,
	0x97, 0xfb, 0x3d, 0xa1, 0x9d, 0xc2, 0xe6, 0xd4, 0xd6, 0xfc, 0x83, 0xcf, 0x87, 0x23, 0x7b, 0x0b,
	0x19, 0xdb, 0x4f, 0x85, 0x8a, 0x77, 0x4d, 0x7b, 0x97, 0x1c, 0xa7, 0x3f, 0xf5, 0xfa, 0x53, 0x32,
	0x97, 0x11, 0xe8, 0x35, 0x32, 0x03, 0xdd, 0x64, 0xeb, 0x79, 0xc5, 0x7c, 0x36, 0x7c, 0x5a, 0x26,
	0xc5, 0x61, 0xff, 0xec, 0x65, 0xdf, 0xae, 0xe1, 0x7c, 0x26, 0xe8, 0xeb, 0x7e, 0xf9, 0xef, 0x66,
	0xc9, 0x6a, 0x36, 0x8e, 0xfa, 0xa9, 0x88, 0x92, 0x56, 0x2c, 0xa3, 0x44, 0xd3, 0xeb, 0x64, 0x56,
	0x98, 0xcf, 0xa1, 0xd8, 0x19, 0xf8, 0x6e, 0xf8, 0xb4, 0x4d, 0x16, 0xd3, 0x8d, 0xe9, 0x03, 0xb3,
	0x73, 0x09, 0xa6, 0x76, 0x6f, 0xc2, 0xd4, 0x72, 0x22, 0xb7, 0xed, 0xae, 0xe1, 0x97, 0x5b, 0xe4,
	0xf9, 0xcf, 0xf5, 0x97, 0x64, 0xb5, 0x25, 0x94, 0x8c, 0x7d, 0xe9, 0xb9, 0x42, 0xc7, 0x03, 0xe5,
	0x09, 0x58, 0xc4, 0xfb, 0x64, 0xb5, 0x6f, 0x71, 0xa6, 0x2c, 0x61, 0x38, 0x26, 0xda, 0x1f, 0x6b,
	0xd3, 0xf0, 0xe9, 0xbb, 0x64, 0x4e, 0x89, 0x90, 0xcb, 0x48, 0x46, 0x3d, 0x3b, 0xe5, 0x21, 0x40,
	0x4b, 0x64, 0x2a, 0xe4, 0x2f, 0x41, 0x4d, 0x8a, 0xae, 0xf9, 0xb9, 0xfe, 0x35, 0x59, 0xdd, 0x17,
	0xc9, 0x59, 0xac, 0x4e, 0x84, 0x0f, 0xc3, 0xad, 0x78, 0x66, 0xf9, 0xe9, 0x0d, 0x32, 0xc7, 0xe1,
	0xd7, 0xb0, 0xbb, 0x59, 0x04, 0x1a, 0x3e, 0xbd, 0x4d, 0x8a, 0x89, 0x0c, 0x85, 0x66, 0x3d, 0xc5,
	0xa3, 0x44, 0xa4, 0xfa, 0xb9, 0x00, 0xe0, 0x13, 0xc4, 0xd6, 0xff, 0x78, 0x99, 0x14, 0x47, 0x26,
	0x4d, 0x6f, 0x12, 0x72, 0x41, 0xfd, 0xe7, 0x78, 0xa6, 0xcd, 0xb7, 0x49, 0x31, 0x8a, 0x55, 0xc8,
	0x83, 0xe1, 0xc2, 0x82, 0x54, 0x04, 0xad, 0x8c, 0x3b, 0x64, 0xb1, 0xaf, 0x44, 0x28, 0x07, 0x61,
	0xca, 0x85, 0x93, 0x29, 0x5a, 0xd4, 0xb2, 0xad, 0x92, 0xcb, 0xf1, 0x59, 0x24, 0x7c, 0x67, 0x7a,
	0xb3, 0xb0, 0x35, 0xeb, 0xe2, 0x07, 0xdd, 0x26, 0x2b, 0x66, 0x0e, 0xa7, 0x82, 0x89, 0xa3, 0x23,
	0xe1, 0x25, 0x9a, 0x85, 0x5c, 0x9f, 0x38, 0x0b, 0x9b, 0x85, 0xad, 0x69, 0x77, 0x19, 0x49, 0x75,
	0xa4, 0x34, 0xb9, 0x3e, 0xa1, 0xef, 0x91, 0x85, 0x33, 0xde, 0x13, 0x8a, 0xe9, 0x44, 0x09, 0x7e,
	0xe2, 0x5c, 0x43, 0x15, 0x02, 0xac, 0x0d, 0x10, 0x8d, 0xc8, 0x75, 0xd4, 0x94, 0x1e, 0x0f, 0x05,
	0xf3, 0x06, 0x3a, 0x89, 0x43, 0x86, 0x0b, 0xa5, 0x9d, 0xeb, 0xa0, 0x19, 0x9f, 0xbe, 0x41, 0x33,
	0x26, 0xad, 0xbf, 0xbb, 0x06, 0x52, 0x9f, 0xf0, 0x50, 0x54, 0x41, 0x26, 0xc2, 0xda, 0x18, 0x92,
	0x44, 0xf6, 0x19, 0x0f, 0x71, 0x19, 0x23, 0x5f, 0xbc, 0x74, 0xd6, 0xd1, 0x90, 0x24, 0xb2, 0x5f,
	0x01, 0xb8, 0x61, 0x50, 0xfa, 0x29, 0x59, 0x4b, 0x27, 0x0b, 0x03, 0xd4, 0x82, 0x6b, 0xdc, 0xce,
	0x1b, 0xc0, 0x6f, 0x97, 0x02, 0x3a, 0x6d, 0x03, 0x0d, 0xad, 0x4f, 0x22, 0x02, 0xd1, 0x8f, 0x55,
	0xc2, 0x8e, 0x5e, 0xb2, 0x40, 0x9c, 0x8a, 0xc0, 0x79, 0x17, 0xad, 0x4f, 0x4a, 0x78, 0xfc, 0x72,
	0xcf, 0xc0, 0xf4, 0x84, 0x5c, 0x8b, 0xd2, 0xa1, 0xdb, 0x3e, 0xd2, 0x89, 0xdf, 0xfa, 0xfe, 0x13,
	0xbf, 0x1a, 0x4d, 0x40, 0x35, 0xed, 0x12, 0x7a, 0xe1, 0x24, 0x68, 0x67, 0xe3, 0xad, 0xfa, 0x99,
	0x74, 0xb4, 0xdc, 0xe5, 0xf1, 0xc3, 0xa3, 0xcb, 0x01, 0x59, 0x1b, 0x6d, 0x6f, 0x96, 0x1f, 0xce,
	0xe1, 0x0d, 0x32, 0x07, 0xfb, 0xab, 0x85, 0xc8, 0x4e, 0x83, 0x01, 0xda, 0x42, 0xf8, 0xf4, 0x33,
	0x72, 0x0d, 0x67, 0x7f, 0x26, 0x23, 0x3f, 0x3e, 0x33, 0xa6, 0x58, 0x25, 0xcc, 0x9c, 0x05, 0xab,
	0xc1, 0xab, 0x40, 0x7e, 0x0e, 0xd4, 0xb6, 0x21, 0x76, 0x64, 0x28, 0xca, 0xff, 0x38, 0x45, 0x68,
	0xb5, 0x7d, 0x50, 0x3b, 0xe8, 0x54, 0xa0, 0xc7, 0x46, 0x74, 0x2a, 0x13, 0x41, 0x37, 0xc8, 0x6c,
	0x4f, 0xc5, 0x83, 0x7e, 0x7a, 0x44, 0xa6, 0x77, 0xa7, 0x7f, 0xf3, 0x2f, 0x37, 0x0b, 0xee, 0x0c,
	0xa0, 0x0d, 0xdf, 0x8c, 0x45, 0x8b, 0xc8, 0x17, 0x2a, 0x75, 0x0c, 0x57, 0xdc, 0x59, 0x04, 0x1a,
	0x3e, 0xdd, 0x20, 0xf3, 0x96, 0x18, 0xf1, 0x10, 0xfd, 0xc1, 0x9c, 0x4b, 0x10, 0xda, 0xe7, 0xa1,
	0xa0, 0xbb, 0x64, 0x26, 0x04, 0x63, 0xaf, 0x9d, 0x69, 0x58, 0xbc, 0xad, 0xdc, 0xe2, 0x5d, 0x18,
	0xcd, 0x76, 0xce, 0x3b, 0xb8, 0x69, 0x43, 0xfa, 0x3e, 0x59, 0xb4, 0x8a, 0x0e, 0x8b, 0x22, 0x7d,
	0xe7, 0x32, 0x9c, 0xa0, 0x05, 0x44, 0xcd, 0xaa, 0x35, 0x7c, 0x73, 0xda, 0x25, 0x08, 0x61, 0x3d,
	0xe9, 0x3b, 0x57, 0x60, 0xa0, 0x73, 0x88, 0x3c, 0x91, 0x3e, 0xfd, 0x80, 0x2c, 0xe5, 0x85, 0x78,
	0xca, 0x73, 0x66, 0x80, 0xa7, 0x38, 0x94, 0x52, 0x55, 0x1e, 0x7d, 0x40, 0xae, 0xe6, 0xf9, 0xc0,
	0xc4, 0x24, 0x3c, 0xec, 0x3b, 0xb3, 0x9b, 0x85, 0xad, 0x19, 0x77, 0x65, 0xc8, 0xdd, 0x49, 0x49,
	0xeb, 0x3f, 0x22, 0xf3, 0xb9, 0x81, 0x53, 0x4a, 0xa6, 0x61, 0x35, 0x0a, 0xb0, 0x1a, 0xf0, 0xdb,
	0x58, 0x78, 0x70, 0xf0, 0xc3, 0x45, 0x9c, 0x81, 0xef, 0x86, 0x5f, 0xfe, 0xe3, 0xd2, 0xe8, 0xc6,
	0x58, 0x29, 0xab, 0xe4, 0x92, 0xdd, 0x92, 0x2b, 0x76, 0x4b, 0x2e, 0x49, 0x3f, 0xef, 0x7f, 0x2e,
	0x8d, 0xf8, 0x9f, 0x5d, 0x32, 0x6d, 0xe4, 0x59, 0x97, 0xbc, 0x36, 0x5c, 0x65, 0x23, 0x97, 0x3d,
	0xa9, 0xb2, 0x4e, 0xbd, 0xd2, 0xdc, 0x59, 0xcb, 0x7f, 0xb1, 0x27, 0x07, 0x07, 0x35, 0xf6, 0xe4,
	0xf0, 0x45, 0xdb, 0x85, 0xb6, 0xd9, 0xc0, 0xaf, 0xe4, 0x06, 0x4e, 0xc9, 0xb4, 0x0e, 0xe2, 0x04,
	0x16, 0xab, 0xe8, 0xc2, 0x6f, 0x33, 0x99, 0x3e, 0x57, 0xc9, 0xb9, 0x19, 0x05, 0x1a, 0xb3, 0x19,
	0xf8, 0xc6, 0x5d, 0x08, 0x45, 0xc2, 0xed, 0x49, 0x2e, 0xa2, 0xcd, 0x35, 0x08, 0x9e, 0xe1, 0x6b,
	0x46, 0x1d, 0x12, 0x6e, 0xfc, 0xe3, 0x22, 0x0e, 0xdf, 0x7c, 0x7e, 0xdd, 0x37, 0xdb, 0x63, 0x09,
	0x8c, 0x9f, 0x71, 0xe5, 0x0b, 0xdf, 0x59, 0x42, 0x43, 0x8b, 0x0c, 0x15, 0x04, 0x69, 0x9b, 0x14,
	0x03, 0xc1, 0x4f, 0xc1, 0x46, 0xf2, 0x64, 0xa0, 0x9d, 0x12, 0xcc, 0xf7, 0xdd, 0xd1, 0xf9, 0xee,
	0x01, 0x4b, 0x1b, 0x38, 0x58, 0xb2, 0x53, 0x82, 0x59, 0xef, 0xd5, 0x2b, 0xcf, 0xea, 0x2e, 0xdb,
	0x3f, 0xd8, 0xaf, 0xbb, 0x0b, 0x41, 0x8e, 0xc3, 0x18, 0x79, 0x2b, 0x34, 0x35, 0x28, 0x68, 0x82,
	0x6c, 0x57, 0xa9, 0x4d, 0xb8, 0x41, 0x66, 0xbc, 0x63, 0x1e, 0x45, 0x22, 0x70, 0x96, 0x0d, 0x7d,
	0xa7, 0xf0, 0xc8, 0x4d, 0x11, 0x63, 0x28, 0x7d, 0xa9, 0x79, 0x37, 0x10, 0x3e, 0x4b, 0x77, 0x68,
	0x75, 0x73, 0xca, 0x18, 0xca, 0x14, 0x7f, 0x8a, 0x3b, 0xf5, 0x01, 0x59, 0x12, 0xd1, 0x28, 0xe3,
	0x1a, 0x30, 0x16, 0x2d, 0x6c, 0xf9, 0x7e, 0x4a, 0x08, 0xc6, 0x70, 0xb0, 0xaf, 0xd7, 0x5e, 0xbb,
	0xaf, 0x2b, 0x23, 0xfb, 0xba, 0x7f, 0x60, 0xfe, 0x73, 0xe7, 0xa0, 0x79, 0xc7, 0xec, 0xec, 0x36,
	0x59, 0x81, 0x0f, 0xe1, 0xe7, 0xc2, 0x3c, 0xed, 0x7c, 0x06, 0xfd, 0x2e, 0x5b, 0x52, 0x16, 0xe8,
	0x69, 0xe3, 0x89, 0xb0, 0x6f, 0xc5, 0x13, 0xe3, 0xd9, 0xef, 0xa2, 0x27, 0x02, 0xcc, 0x05, 0x88,
	0x7e, 0x4c, 0x68, 0xff, 0x4c, 0xf9, 0xcc, 0x3b, 0xef, 0x0a, 0xc5, 0x3c, 0x7e, 0x04, 0x27, 0xd3,
	0xb1, 0x91, 0xe3, 0x99, 0xf2, 0xab, 0x86, 0x50, 0xe5, 0x47, 0xe6, 0x70, 0x7e, 0x42, 0x56, 0xc7,
	0x99, 0x41, 0xd3, 0xae, 0x83, 0xa6, 0x2d, 0x8f, 0xb0, 0x83, 0xdd, 0xf8, 0x82, 0x5c, 0xcf, 0x96,
	0x53, 0xf1, 0xc8, 0x8f, 0x43, 0x5c, 0xac, 0xae, 0x4c, 0xb4, 0xf3, 0xd1, 0xe6, 0xd4, 0xd6, 0x8c,
	0xbb, 0x96, 0x32, 0xb8, 0x40, 0x87, 0x18, 0x4d, 0x26, 0xda, 0xd8, 0x24, 0xc5, 0xa3, 0x13, 0x66,
	0x76, 0xa6, 0x27, 0x9c, 0x9b, 0x9b, 0x85, 0xad, 0x65, 0x97, 0x18, 0xa8, 0x0a, 0x88, 0x89, 0x59,
	0x3c, 0x1e, 0x0a, 0xc5, 0x43, 0x1e, 0x39, 0xb7, 0xc0, 0x61, 0x0f, 0x01, 0x63, 0x5e, 0xf3, 0x06,
	0xa0, 0xaf, 0x62, 0x7f, 0xe0, 0xe1, 0x72, 0x6d, 0xc0, 0x72, 0xad, 0x0e, 0x4d, 0x40, 0x0b, 0x89,
	0x66, 0xc5, 0x5c, 0xb2, 0xac, 0x05, 0x57, 0xde, 0x31, 0x0b, 0x79, 0x62, 0x36, 0xed, 0xbc, 0x2f,
	0x9c, 0xf7, 0x60, 0xd3, 0x56, 0x86, 0x9b, 0xd6, 0x34, 0xb4, 0xce, 0x79, 0x5f, 0xec, 0x2c, 0x37,
	0x2b, 0x9d, 0xea, 0x53, 0xd6, 0x79, 0xd1, 0xaa, 0xb3, 0x6a, 0xa5, 0x7d, 0x58, 0xd9, 0x73, 0x97,
	0x50, 0x40, 0xc6, 0x63, 0xc2, 0xb1, 0x23, 0x7e, 0x1a, 0x2b, 0x63, 0xd4, 0xc0, 0x78, 0xf4, 0xb9,
	0x77, 0x22, 0x7c, 0xe7, 0x36, 0x9c, 0x39, 0x9a, 0xd2, 0xcc, 0x0e, 0xb7, 0x80, 0x42, 0xef, 0x11,
	0x2a, 0x35, 0xeb, 0x07, 0x03, 0xcd, 0x34, 0x46, 0xb7, 0x5d, 0xa1, 0x9c, 0xf7, 0x61, 0x8e, 0x25,
	0xa9, 0x73, 0x51, 0xaf, 0x31, 0x31, 0xf7, 0xc9, 0x6a, 0xc0, 0x23, 0xe3, 0x66, 0x02, 0x81, 0xc1,
	0xd7, 0x51, 0xc0, 0x7b, 0xda, 0xf9, 0x00, 0xc3, 0x3d, 0x43, 0x6b, 0xa7, 0xa4, 0xc7, 0x86, 0x02,
	0x79, 0x05, 0x8f, 0x98, 0xe0, 0x2a, 0x62, 0x4a, 0x98, 0x33, 0xa9, 0x9d, 0x0f, 0x41, 0xfa, 0xa2,
	0xc7, 0xa3, 0x3a, 0x57, 0x91, 0x8b, 0x28, 0xfd, 0x05, 0x59, 0x09, 0x4c, 0x30, 0xa0, 0xfb, 0xc2,
	0x4b, 0x78, 0x12, 0x2b, 0x54, 0xe3, 0xad, 0xef, 0xae, 0xc6, 0xcb, 0x46, 0x4e, 0x3b, 0x15, 0x03,
	0xea, 0xfc, 0x11, 0x59, 0x3e, 0xe3, 0x9a, 0x85, 0xa7, 0x7d, 0x16, 0x70, 0x8d, 0xc1, 0x90, 0xf3,
	0x31, 0x8e, 0xe3, 0x8c, 0xeb, 0xe6, 0x69, 0x7f, 0x8f, 0x6b, 0x70, 0xa7, 0xf4, 0x31, 0x59, 0xec,
	0x8b, 0xc8, 0x97, 0x51, 0x0f, 0x0d, 0x8b, 0x76, 0xee, 0x81, 0x1f, 0xda, 0x18, 0x75, 0xe2, 0x2d,
	0xe4, 0xc1, 0x18, 0xc0, 0xf0, 0xb9, 0x45, 0xdb, 0xac, 0x82, 0xf3, 0xf9, 0x39, 0xb9, 0x3e, 0x2a,
	0x87, 0xc5, 0x11, 0x3b, 0x95, 0x5e, 0x12, 0xab, 0x73, 0xe7, 0x07, 0x6f, 0x27, 0x72, 0x6d, 0x44,
	0xe4, 0x41, 0xf4, 0x0c, 0x9b, 0x53, 0x9f, 0xac, 0x80, 0xc6, 0x86, 0xa1, 0x62, 0xdd, 0x38, 0xd6,
	0x09, 0x6a, 0xcf, 0x36, 0xac, 0xd5, 0x8d, 0x5c, 0x76, 0x65, 0x96, 0xa7, 0xd9, 0x74, 0x77, 0x0d,
	0x0f, 0x68, 0x91, 0x73, 0xc2, 0x2e, 0x80, 0x98, 0x45, 0x95, 0x8c, 0xc4, 0x66, 0xa8, 0x32, 0x98,
	0x3e, 0x24, 0x6b, 0xdf, 0x0e, 0xc4, 0x40, 0x60, 0x20, 0xcb, 0xb8, 0xff, 0xcd, 0x40, 0x27, 0xa1,
	0x88, 0x12, 0xe7, 0x13, 0x38, 0x22, 0xab, 0x40, 0x85, 0x18, 0xa6, 0x92, 0xd1, 0x8c, 0xfb, 0x87,
	0xb1, 0x25, 0x52, 0x28, 0xe7, 0xfe, 0x66, 0x61, 0xeb, 0xb2, 0x3b, 0x6b, 0x80, 0x8e, 0x04, 0x1f,
	0x75, 0x39, 0x91, 0x49, 0x20, 0x9c, 0x07, 0xa0, 0x31, 0xf8, 0x61, 0xdc, 0x43, 0x6f, 0x20, 0x03,
	0xdf, 0xd8, 0x83, 0x4f, 0x31, 0x9b, 0x81, 0xef, 0x86, 0x4f, 0x3f, 0x26, 0xcb, 0x0a, 0x82, 0x3a,
	0xcd, 0xf8, 0x29, 0x97, 0x81, 0x39, 0xbf, 0xce, 0x43, 0xe0, 0x29, 0x59, 0x42, 0x25, 0xc5, 0x8d,
	0xdf, 0x97, 0x9a, 0xa1, 0xdb, 0xf4, 0x8e, 0x65, 0xc4, 0x9d, 0x47, 0xb0, 0xc5, 0x0b, 0x52, 0xb7,
	0x0d, 0x58, 0x35, 0x98, 0xb1, 0x14, 0x63, 0x8a, 0x96, 0x0b, 0xfa, 0x3f, 0x07, 0xd1, 0x6b, 0x23,
	0x1a, 0x34, 0xcc, 0x67, 0x1f, 0x91, 0x6b, 0x26, 0x27, 0xd7, 0xec, 0xe2, 0x98, 0xfe, 0x0f, 0x34,
	0xbc, 0x0a, 0x64, 0x77, 0x6c, 0x60, 0xe5, 0x75, 0xe2, 0x58, 0x87, 0xdd, 0x16, 0xea, 0x54, 0xa8,
	0x9c, 0xdb, 0xce, 0xd3, 0x12, 0x9e, 0x48, 0x2f, 0x4f, 0xdb, 0x24, 0xb7, 0x46, 0xda, 0x5d, 0xe4,
	0xf8, 0xfb, 0x69, 0xb2, 0x5c, 0x05, 0xc0, 0xe8, 0x79, 0x4d, 0x24, 0x5c, 0x06, 0xc6, 0xf1, 0xcc,
	0xc1, 0x22, 0xe4, 0xa2, 0x8a, 0x59, 0x03, 0xec, 0xdb, 0xc8, 0x02, 0x88, 0x09, 0xef, 0xd9, 0xf8,
	0x6b, 0xc6, 0x7c, 0x77, 0x78, 0xcf, 0x78, 0xdb, 0x34, 0xe6, 0x98, 0x46, 0x6f, 0x8b, 0x21, 0x47,
	0x26, 0x30, 0x88, 0x7b, 0xb1, 0x0d, 0xa6, 0x40, 0xc8, 0x5e, 0xdc, 0x8b, 0xcd, 0xb2, 0x03, 0xb1,
	0xcb, 0xb5, 0x40, 0x8e, 0x2b, 0x18, 0x6e, 0x19, 0x74, 0x97, 0x6b, 0x01, 0x5c, 0x26, 0x31, 0x40,
	0xae, 0x28, 0x12, 0x0a, 0xf9, 0x66, 0x80, 0x6f, 0x11, 0xf9, 0x0c, 0x0c, 0x9c, 0x26, 0x7b, 0x83,
	0x2d, 0x8c, 0xc3, 0x7e, 0x20, 0x12, 0x01, 0x91, 0xd4, 0x2c, 0x8a, 0xab, 0x5a, 0xcc, 0x84, 0x19,
	0x46, 0xab, 0xac, 0xd3, 0x87, 0xdf, 0xe3, 0x86, 0xbc, 0x74, 0xc1, 0x90, 0x6f, 0x92, 0x05, 0xa9,
	0xd9, 0x71, 0x1c, 0xa2, 0x79, 0x04, 0xaf, 0x3c, 0xeb, 0x12, 0xa9, 0x9f, 0xc6, 0x21, 0x58, 0x45,
	0x6b, 0x0f, 0xbd, 0x63, 0x1e, 0x04, 0x22, 0xea, 0x09, 0xb4, 0xcd, 0x0e, 0x4d, 0xed, 0x61, 0x35,
	0x25, 0x80, 0xcd, 0xa5, 0x15, 0x72, 0x73, 0x8c, 0x95, 0x25, 0xf1, 0x89, 0x88, 0x52, 0x8d, 0x72,
	0x56, 0x60, 0x82, 0xeb, 0xde, 0x48, 0xb3, 0x8e, 0x61, 0xb1, 0x4a, 0x45, 0xcb, 0x76, 0xb2, 0x66,
	0x3d, 0xd8, 0x40, 0x05, 0xce, 0x2a, 0x6c, 0xc9, 0x7c, 0xba, 0xba, 0x87, 0x2a, 0x30, 0x87, 0x00,
	0x78, 0x78, 0xb7, 0xab, 0xc4, 0xa9, 0xe4, 0xc6, 0xbc, 0x3a, 0x57, 0x81, 0x0f, 0xd6, 0xb4, 0x92,
	0xc3, 0xcb, 0x7f, 0x32, 0x61, 0x3b, 0x68, 0xc4, 0x13, 0x73, 0x86, 0x52, 0x95, 0xc8, 0x9f, 0xb1,
	0xc2, 0xe8, 0x19, 0xdb, 0x26, 0x2b, 0x48, 0xea, 0x2b, 0x19, 0x72, 0x75, 0xce, 0xbc, 0x38, 0x88,
	0x95, 0x0d, 0x17, 0x97, 0x81, 0xd4, 0x42, 0x4a, 0xd5, 0x10, 0x4c, 0xc4, 0x8b, 0xfc, 0x5a, 0x78,
	0x71, 0xe4, 0x0f, 0x5b, 0x60, 0xa6, 0x8b, 0xc2, 0xda, 0x29, 0x0d, 0xdb, 0xdc, 0x26, 0x45, 0xdb,
	0x07, 0x4f, 0x12, 0xa1, 0x22, 0xab, 0x5f, 0x0b, 0x28, 0x1d, 0x31, 0x13, 0x0b, 0x22, 0x53, 0x4e,
	0xcd, 0xe6, 0x00, 0x01, 0xbd, 0x78, 0x8f, 0x2c, 0x58, 0x19, 0x98, 0x58, 0x5f, 0xc1, 0x18, 0x03,
	0x45, 0x60, 0x5a, 0xbd, 0x41, 0xf0, 0x13, 0xd3, 0x3d, 0x1b, 0x83, 0xa2, 0x50, 0x30, 0xab, 0x43,
	0x06, 0x74, 0x5c, 0xb3, 0x39, 0x06, 0x74, 0x58, 0x1d, 0xab, 0xcc, 0x47, 0xb1, 0x62, 0x00, 0x3b,
	0x73, 0xdf, 0x2b, 0x40, 0x06, 0x6d, 0x7d, 0x1c, 0x2b, 0xd8, 0x04, 0xc8, 0xcf, 0xa0, 0x5b, 0x73,
	0xe8, 0x08, 0x1e, 0x48, 0x00, 0xcc, 0xa9, 0x7b, 0x44, 0xae, 0x21, 0xf1, 0x4c, 0x88, 0x93, 0xe0,
	0x9c, 0xf5, 0x85, 0xf2, 0x44, 0x94, 0xc8, 0x40, 0x38, 0xf3, 0x68, 0x55, 0x80, 0xfc, 0x1c, 0xa8,
	0xad, 0x8c, 0x58, 0xfe, 0xf7, 0x02, 0x71, 0xec, 0xd9, 0x97, 0xa1, 0xf0, 0xd1, 0x91, 0xa6, 0xfb,
	0x6d, 0x6c, 0x61, 0x22, 0x42, 0xe6, 0x8b, 0x23, 0x9b, 0x85, 0xdb, 0x6a, 0x85, 0x41, 0x6b, 0xe2,
	0x08, 0x73, 0xf0, 0x0f, 0xc8, 0x92, 0xb1, 0x98, 0x83, 0x7e, 0x3f, 0x38, 0x67, 0x9e, 0x4a, 0x4b,
	0x74, 0xb3, 0x6e, 0x51, 0xea, 0x36, 0xa0, 0x55, 0x03, 0x1a, 0x2d, 0x95, 0x1a, 0x72, 0x1b, 0x9f,
	0xf9, 0x2a, 0xee, 0xdb, 0xb2, 0xc5, 0xbc, 0xd4, 0xd0, 0x75, 0x4d, 0xc5, 0xfd, 0xb1, 0xea, 0xc9,
	0xe5, 0xf1, 0xea, 0xc9, 0x1a, 0xb9, 0x12, 0x2b, 0xd9, 0x93, 0x91, 0xdd, 0x37, 0xfb, 0x55, 0xfe,
	0x43, 0x81, 0xac, 0xe3, 0x2c, 0x76, 0x55, 0xcc, 0x7d, 0x8f, 0xeb, 0xa4, 0x8a, 0x21, 0x72, 0x23,
	0x3a, 0x8a, 0x8d, 0x54, 0x1b, 0x31, 0xe7, 0x6a, 0x32, 0x16, 0x69, 0xf8, 0x18, 0x77, 0x0e, 0xa2,
	0x04, 0x74, 0xd0, 0xc7, 0x84, 0x76, 0xce, 0xc4, 0x9d, 0x80, 0x55, 0x63, 0xdf, 0x1c, 0xfa, 0x79,
	0x5f, 0x64, 0x75, 0x3b, 0x6b, 0xf2, 0xf2, 0x90, 0x51, 0xce, 0x80, 0x47, 0xbd, 0x01, 0xef, 0x09,
	0x94, 0x32, 0x0d, 0x3c, 0x0b, 0x29, 0x68, 0xc4, 0x94, 0xff, 0x75, 0x8a, 0xac, 0xe6, 0xce, 0x55,
	0x66, 0x09, 0x5e, 0x77, 0xb2, 0x76, 0x72, 0x65, 0xba, 0x4b, 0xa0, 0x46, 0xa5, 0x9c, 0x73, 0x06,
	0x8d, 0xdc, 0x29, 0xd6, 0x9f, 0xd5, 0xf7, 0x3b, 0xac, 0x51, 0xc3, 0x44, 0x23, 0xab, 0xe3, 0x99,
	0xbc, 0x32, 0xb3, 0x2d, 0x32, 0xd2, 0x09, 0x8f, 0xb0, 0xb6, 0x66, 0x4f, 0x59, 0x46, 0x6c, 0x58,
	0x1a, 0x44, 0xcd, 0x43, 0x98, 0xf5, 0xb9, 0xe2, 0xa1, 0x48, 0x84, 0xb2, 0x67, 0x8d, 0x66, 0xa4,
	0x56, 0x4a, 0x19, 0x6d, 0x30, 0x4c, 0x5d, 0x2f, 0x8f, 0x35, 0xc8, 0x32, 0x57, 0xf0, 0x80, 0xc3,
	0x1e, 0xa0, 0x42, 0xc1, 0xb4, 0x50, 0x92, 0x07, 0x76, 0x5b, 0x87, 0x83, 0xc6, 0xaa, 0x46, 0x1b,
	0x88, 0xf4, 0x4b, 0x72, 0x23, 0xd7, 0x4e, 0xc5, 0x3d, 0x25, 0xb4, 0x66, 0x3c, 0xc1, 0x62, 0x84,
	0x3d, 0xa8, 0xce, 0xb0, 0xad, 0xe5, 0xa8, 0x24, 0x50, 0x8f, 0x30, 0x81, 0xa7, 0x08, 0x64, 0x4f,
	0x76, 0x03, 0x31, 0x92, 0x8f, 0xcc, 0x42, 0x80, 0x4d, 0x53, 0xda, 0x30, 0x21, 0x29, 0xff, 0x7e,
	0x9b, 0x2c, 0xe4, 0x93, 0x64, 0xba, 0x41, 0x66, 0xa1, 0x90, 0x7e, 0xa1, 0x6e, 0x01, 0x68, 0xc3,
	0xa7, 0x5f, 0x92, 0x79, 0x1e, 0x04, 0x2c, 0xad, 0x3e, 0xbc, 0x84, 0x10, 0xed, 0xdd, 0xc9, 0xd5,
	0x07, 0x5b, 0x71, 0x20, 0x3c, 0x08, 0x9a, 0xb6, 0xe8, 0x70, 0x87, 0x2c, 0x62, 0x53, 0x73, 0xdc,
	0xa4, 0x27, 0xb4, 0x73, 0x8e, 0x49, 0x1a, 0xa2, 0x0d, 0x04, 0x8d, 0xb1, 0x0d, 0xc4, 0x51, 0xc2,
	0xc6, 0x78, 0x7f, 0x85, 0x89, 0x95, 0x21, 0x35, 0xc7, 0xf9, 0x8f, 0x94, 0x10, 0xe3, 0xfc, 0x7f,
	0x89, 0xfc, 0x86, 0x34, 0xca, 0x7f, 0x83, 0xcc, 0x05, 0x82, 0xdb, 0xea, 0xcb, 0x3c, 0x56, 0x5f,
	0x10, 0x68, 0xf8, 0xf4, 0x16, 0x99, 0xd3, 0x10, 0x48, 0xb0, 0xb4, 0xe2, 0xb1, 0x53, 0xb8, 0xef,
	0xce, 0x22, 0x86, 0x6e, 0x1e, 0x72, 0x98, 0xd0, 0x1c, 0x82, 0xa9, 0x61, 0x19, 0xa9, 0x69, 0xce,
	0xd1, 0x87, 0x64, 0x29, 0x0d, 0x68, 0xb1, 0x4a, 0xa2, 0x1d, 0xb2, 0x39, 0xb5, 0x75, 0xc5, 0x4d,
	0xe3, 0x65, 0x2c, 0xc9, 0x68, 0xfa, 0x88, 0x5c, 0xc6, 0x6a, 0xff, 0xf4, 0x78, 0xaa, 0x9d, 0x5f,
	0xc2, 0x6d, 0x2c, 0xf1, 0x5f, 0x3a, 0x6c, 0xb8, 0xc8, 0x4e, 0x1d, 0x32, 0xe3, 0xc5, 0x51, 0x24,
	0xbc, 0x04, 0x14, 0x70, 0xce, 0x4d, 0x3f, 0xe9, 0x53, 0x42, 0x70, 0xef, 0x20, 0xcc, 0x5d, 0x00,
	0xb1, 0x9b, 0xaf, 0x10, 0x8b, 0x06, 0xd1, 0xc4, 0xba, 0x33, 0x8d, 0xfd, 0x67, 0x95, 0xbd, 0x46,
	0xcd, 0x9d, 0x0b, 0x52, 0xcc, 0xd8, 0x0b, 0x1e, 0x04, 0xf1, 0x19, 0xf3, 0x8e, 0x05, 0x4f, 0x34,
	0x14, 0x1c, 0x66, 0xdd, 0x79, 0xc0, 0xaa, 0x00, 0x19, 0xcb, 0x79, 0x24, 0x83, 0x80, 0x9d, 0xc9,
	0xe4, 0x98, 0x75, 0xe3, 0x44, 0x43, 0xe5, 0x61, 0xd6, 0x5d, 0x30, 0xe8, 0x73, 0x99, 0x1c, 0xef,
	0xc6, 0x58, 0x2b, 0x96, 0x51, 0xa2, 0x62, 0x5c, 0xab, 0x25, 0x4c, 0x0a, 0x01, 0x81, 0xc5, 0x4a,
	0x57, 0x12, 0x22, 0xb0, 0x92, 0x35, 0xf8, 0x3c, 0xc4, 0x5c, 0xf5, 0xc7, 0x04, 0xbc, 0x03, 0xf3,
	0xd1, 0x56, 0x3b, 0xcb, 0xa0, 0x6a, 0xb9, 0xb8, 0xfd, 0x42, 0x44, 0x87, 0xf1, 0x40, 0x6a, 0xdb,
	0x3f, 0x24, 0x4b, 0xc9, 0x20, 0x89, 0xcd, 0xc1, 0x62, 0x81, 0xd0, 0x3a, 0x8e, 0x20, 0x42, 0x29,
	0xba, 0x8b, 0x29, 0xbc, 0x07, 0x28, 0x44, 0x52, 0xf1, 0x40, 0x99, 0x41, 0xa0, 0x11, 0x5a, 0xb1,
	0x75, 0xf0, 0x0c, 0x6c, 0x40, 0x0a, 0x98, 0x63, 0x4a, 0x2b, 0x66, 0xab, 0x18, 0x63, 0x0f, 0x29,
	0xb6, 0x6a, 0xf6, 0x01, 0x29, 0x5a, 0x15, 0x52, 0xa2, 0x97, 0xc6, 0x21, 0x45, 0xa3, 0x46, 0x0b,
	0x88, 0xbb, 0x00, 0x53, 0x97, 0x10, 0xac, 0x48, 0x82, 0x26, 0xac, 0xc1, 0x96, 0x39, 0xe3, 0x3e,
	0x94, 0x87, 0x02, 0xb5, 0xe0, 0x3a, 0x7e, 0x57, 0x9a, 0x75, 0xf7, 0x70, 0xaf, 0xde, 0x66, 0xed,
	0x4e, 0xa5, 0x53, 0x67, 0x8d, 0xfd, 0x46, 0xc7, 0x85, 0x75, 0x04, 0x2e, 0x73, 0xc4, 0xa2, 0x41,
	0x38, 0x0c, 0xdc, 0xb5, 0x2d, 0x78, 0x17, 0xa3, 0x41, 0x98, 0x45, 0xeb, 0x9a, 0xde, 0x22, 0x04,
	0x62, 0x31, 0x28, 0x48, 0x42, 0xc5, 0xa0, 0xe8, 0xe6, 0x10, 0xfa, 0x13, 0x32, 0xe3, 0x85, 0xac,
	0x2f, 0xbd, 0x13, 0x28, 0xdb, 0x5c, 0xf4, 0xed, 0xd5, 0x26, 0x6b, 0x35, 0xaa, 0x5f, 0xed, 0x2c,
	0xa6, 0x5f, 0x6e, 0x65, 0xbf, 0x76, 0xd0, 0x74, 0xaf, 0x78, 0x61, 0x4b, 0x7a, 0x27, 0xc6, 0xe2,
	0x63, 0xb0, 0x27, 0x7d, 0x28, 0x07, 0x4c, 0xbb, 0x33, 0xf0, 0x0d, 0x16, 0xb8, 0x84, 0xfa, 0x65,
	0x07, 0x29, 0xa3, 0x9e, 0xb3, 0x61, 0x94, 0x63, 0x67, 0x3a, 0x51, 0x03, 0xe1, 0x2e, 0x01, 0xb5,
	0x9d, 0x11, 0xe9, 0x11, 0x59, 0xeb, 0xc6, 0x09, 0xf3, 0xe5, 0xd1, 0x91, 0xf4, 0x06, 0x41, 0x72,
	0xce, 0x14, 0xf7, 0x25, 0x8f, 0x12, 0x48, 0xc2, 0x47, 0xb2, 0x39, 0x33, 0x9a, 0xdd, 0x38, 0xa9,
	0x65, 0xac, 0x3b, 0x2b, 0xbb, 0x07, 0x1d, 0x56, 0x6b, 0x3c, 0x7e, 0xdc, 0xa8, 0x1e, 0xee, 0x75,
	0x5e, 0xb0, 0xa7, 0x15, 0xb7, 0xe6, 0xae, 0x76, 0xf3, 0x3c, 0x2e, 0x4a, 0xa3, 0x1d, 0xb2, 0x8a,
	0xee, 0x1b, 0xb3, 0xf0, 0x4c, 0xf7, 0x3e, 0x00, 0xdd, 0x2b, 0x5f, 0xd0, 0xbd, 0x0b, 0x11, 0x85,
	0x4b, 0x93, 0x8b, 0x51, 0x06, 0x14, 0xf6, 0xb4, 0x66, 0x27, 0xe2, 0x1c, 0xd2, 0xfa, 0x39, 0x77,
	0xc6, 0x7c, 0x7f, 0x25, 0xce, 0xe9, 0x3a, 0x31, 0x76, 0xa7, 0x37, 0x10, 0xd2, 0xb7, 0xd5, 0xa0,
	0xec, 0x9b, 0x7e, 0x46, 0xae, 0xf6, 0x45, 0xc4, 0xcd, 0x6c, 0xa1, 0xee, 0x97, 0xcd, 0xf9, 0xe3,
	0x54, 0x99, 0x56, 0x2c, 0x1d, 0xaa, 0x80, 0xe9, 0x1c, 0x3e, 0x21, 0x74, 0xb4, 0x99, 0x2f, 0x95,
	0x70, 0xee, 0xa5, 0x6d, 0x4a, 0xf9, 0x36, 0x35, 0xa9, 0x20, 0xde, 0x0f, 0x62, 0xee, 0x67, 0x4a,
	0xfd, 0x03, 0xd4, 0x05, 0x83, 0x59, 0x75, 0x86, 0x7a, 0xb4, 0x92, 0x42, 0x0f, 0x33, 0xe8, 0xa2,
	0x4b, 0x10, 0x02, 0x83, 0xb1, 0x6d, 0x52, 0x6d, 0xe8, 0x9e, 0x59, 0xc6, 0x33, 0x19, 0x69, 0xc8,
	0x80, 0x8b, 0xee, 0xb2, 0x25, 0xb5, 0x81, 0xf2, 0x5c, 0xe2, 0xfd, 0x87, 0x19, 0xd5, 0x08, 0xf3,
	0x7d, 0x3c, 0x9c, 0x06, 0xcf, 0x71, 0xde, 0x21, 0x8b, 0x41, 0x1c, 0x27, 0xac, 0x27, 0x22, 0x61,
	0x82, 0x2c, 0xdf, 0xf9, 0xa1, 0x2d, 0x22, 0xc6, 0x71, 0xf2, 0x24, 0x05, 0x8d, 0xc5, 0x02, 0xb6,
	0xb4, 0xca, 0x89, 0x99, 0xf3, 0xbc, 0xc1, 0xd2, 0x1a, 0xe7, 0x06, 0x99, 0xe1, 0x41, 0xe0, 0x1d,
	0xf3, 0x04, 0xd2, 0xe7, 0xd9, 0x9d, 0xcb, 0x47, 0x3c, 0xd0, 0xc2, 0x4d, 0x51, 0xba, 0x4f, 0x8a,
	0x70, 0x31, 0x9c, 0x9c, 0x32, 0x5f, 0x04, 0xfc, 0xdc, 0xf9, 0x0c, 0x74, 0x6b, 0x7d, 0xb8, 0xeb,
	0xb0, 0xe9, 0xb5, 0x38, 0xe1, 0x9d, 0x67, 0x35, 0xc3, 0xb1, 0xb3, 0x98, 0x43, 0xd8, 0x0f, 0xef,
	0xbb, 0xf3, 0x46, 0x40, 0xe7, 0x14, 0x88, 0x50, 0xd5, 0xc9, 0x95, 0xbc, 0xc0, 0x04, 0x3e, 0x82,
	0xed, 0x5f, 0x1c, 0xd6, 0xba, 0xc0, 0x0e, 0x0e, 0xab, 0xe8, 0x21, 0xef, 0xa3, 0x35, 0xfc, 0x1c,
	0x18, 0x6d, 0x15, 0xbd, 0xc9, 0xfb, 0x60, 0x12, 0x3f, 0x26, 0xcb, 0x96, 0x6f, 0x78, 0x12, 0x6c,
	0x4e, 0x6d, 0xbb, 0x1a, 0xaa, 0x34, 0x2d, 0x91, 0xa9, 0x80, 0x47, 0xce, 0x17, 0x60, 0x74, 0xcd,
	0x4f, 0xfa, 0x73, 0xb2, 0xd6, 0x4d, 0xa3, 0x47, 0x96, 0xc5, 0x8b, 0xd1, 0x51, 0xec, 0xec, 0x80,
	0x7e, 0xbf, 0x3f, 0xae, 0xdf, 0x93, 0x62, 0x4d, 0x77, 0xb5, 0x3b, 0x29, 0x02, 0x7d, 0x48, 0xd6,
	0x8e, 0xa4, 0xd2, 0x09, 0xcb, 0x4a, 0xbe, 0x10, 0x64, 0x48, 0xdf, 0xf9, 0xbf, 0x78, 0x7b, 0x02,
	0xd4, 0x3d, 0x5b, 0xf9, 0xb5, 0x34, 0xbc, 0x05, 0x01, 0x15, 0x90, 0xbe, 0xf3, 0x23, 0xd4, 0x7f,
	0x04, 0x1a, 0x76, 0x4f, 0xcf, 0x4c, 0xbe, 0x15, 0x2b, 0x99, 0x9c, 0x3b, 0x5f, 0xa2, 0x17, 0x0a,
	0xe2, 0xb3, 0x96, 0x85, 0xe8, 0x13, 0xb2, 0x28, 0x5e, 0x26, 0x8a, 0xb3, 0xf4, 0x86, 0xdf, 0xf9,
	0x31, 0xcc, 0xe4, 0x55, 0x6e, 0xaf, 0x5a, 0x37, 0xdc, 0x4d, 0xdd, 0x73, 0x8b, 0xd0, 0xae, 0x69,
	0x9b, 0xd1, 0x87, 0x64, 0x4e, 0xf3, 0x53, 0x81, 0x25, 0xaf, 0x9f, 0x6c, 0x16, 0xb6, 0xe6, 0x1f,
	0x5c, 0xcb, 0xc9, 0x80, 0xe2, 0x02, 0x3f, 0x15, 0x66, 0xc7, 0xdc, 0x59, 0x6d, 0x7f, 0x41, 0x25,
	0x11, 0x26, 0xdd, 0x0d, 0xe2, 0xd8, 0x67, 0xc7, 0xbc, 0xdf, 0x17, 0x91, 0xf0, 0x9d, 0x0a, 0x8c,
	0x94, 0x02, 0x6d, 0xd7, 0x90, 0x9e, 0x5a, 0x0a, 0x3d, 0x24, 0x45, 0x34, 0x8a, 0xf1, 0x20, 0xf1,
	0xe2, 0x50, 0x38, 0x8f, 0x41, 0xc7, 0x72, 0x7d, 0xd5, 0x21, 0xfb, 0x3d, 0x40, 0xf2, 0xce, 0xb5,
	0x13, 0x36, 0x02, 0xb0, 0xc3, 0xe8, 0x24, 0x8a, 0xcf, 0x22, 0x77, 0x21, 0xcc, 0xa1, 0xc6, 0xd7,
	0x85, 0xc6, 0xc2, 0xf8, 0x52, 0xa7, 0xc1, 0x41, 0x15, 0xeb, 0x76, 0x06, 0xae, 0x65, 0xe8, 0x84,
	0x4b, 0x9f, 0xda, 0x84, 0x4b, 0x9f, 0x7b, 0x84, 0xa6, 0xfa, 0x28, 0x23, 0x86, 0xef, 0x15, 0xb4,
	0xf3, 0x24, 0xaf, 0x68, 0x4d, 0x19, 0xe1, 0x95, 0xbf, 0xce, 0x73, 0xf3, 0x97, 0x19, 0xf7, 0xd3,
	0x11, 0x6e, 0xfe, 0x32, 0xe5, 0x7e, 0x41, 0xc8, 0xa9, 0xd4, 0xb2, 0x2b, 0x03, 0xb3, 0xa7, 0x5f,
	0xc1, 0xf4, 0x6f, 0x8e, 0xdd, 0x33, 0x98, 0xbd, 0x7a, 0x96, 0x31, 0xed, 0xac, 0x4f, 0x00, 0x59,
	0x6b, 0xd0, 0x0d, 0xa4, 0xe7, 0xe6, 0x84, 0x4d, 0xba, 0x8c, 0xda, 0x9b, 0x74, 0x19, 0xb5, 0x4b,
	0x6e, 0xe5, 0xf9, 0xf8, 0x20, 0x89, 0x99, 0xa7, 0x84, 0x31, 0x24, 0xf8, 0x8c, 0xc4, 0x69, 0xc2,
	0xe2, 0xad, 0x0f, 0x9b, 0x55, 0x06, 0x49, 0x5c, 0x45, 0x16, 0x0c, 0x94, 0x5f, 0x79, 0xa1, 0xd5,
	0x7a, 0xe5, 0x85, 0x96, 0x49, 0x0b, 0xfa, 0x4a, 0x9c, 0xca, 0x78, 0xa0, 0x53, 0xcb, 0x07, 0xbb,
	0x28, 0xb4, 0xf3, 0xb3, 0xcd, 0xa9, 0xad, 0x69, 0xf7, 0x6a, 0x4a, 0x46, 0x03, 0xd8, 0x44, 0xe2,
	0x48, 0x3b, 0xab, 0x3d, 0xa7, 0x42, 0x29, 0xe9, 0x0b, 0xc7, 0x85, 0xdd, 0xcb, 0xda, 0xa1, 0xaa,
	0x58, 0xa2, 0x59, 0x8f, 0x34, 0xba, 0x48, 0xaf, 0x32, 0x9f, 0xa3, 0xf1, 0xb4, 0xd1, 0x02, 0xde,
	0x61, 0x52, 0x41, 0x8a, 0x7d, 0x3e, 0xd0, 0xc6, 0x1c, 0x27, 0xe0, 0x8b, 0xbf, 0x86, 0x5d, 0xd9,
	0x98, 0x60, 0xf8, 0x5a, 0x86, 0xaf, 0x8d, 0x6c, 0x3b, 0x1b, 0x13, 0x61, 0x76, 0x18, 0x05, 0x32,
	0x94, 0x89, 0xf0, 0xdd, 0x85, 0x7e, 0x0e, 0x37, 0xd9, 0x8d, 0xc9, 0xdd, 0x45, 0xe4, 0x33, 0x08,
	0x98, 0xc4, 0x39, 0xf3, 0xa5, 0xd9, 0x3e, 0xbc, 0xcf, 0xfe, 0x39, 0x66, 0x37, 0x96, 0xa5, 0x83,
	0x1c, 0x35, 0xcb, 0x00, 0x99, 0xc7, 0x85, 0xe6, 0xfa, 0xc4, 0x84, 0xa0, 0x78, 0x29, 0xf6, 0x8b,
	0x49, 0xcd, 0xdb, 0x86, 0x01, 0xef, 0xc8, 0x2a, 0xe4, 0xe6, 0x78, 0xf3, 0xae, 0xe2, 0xde, 0x89,
	0x48, 0x98, 0x8a, 0x07, 0x91, 0xef, 0xfc, 0x3f, 0x10, 0xb0, 0x3e, 0x2a, 0x60, 0x17, 0x59, 0x5c,
	0xc3, 0x41, 0x7f, 0x49, 0x56, 0xc6, 0xa2, 0x10, 0x70, 0xad, 0xff, 0xff, 0x7b, 0x86, 0x20, 0xcb,
	0x23, 0x21, 0x08, 0xb8, 0xe2, 0x0d, 0x32, 0x6f, 0x7a, 0x48, 0x1d, 0xfd, 0x5f, 0xc0, 0xee, 0x92,
	0x6e, 0x9c, 0xa4, 0xce, 0xfd, 0x3a, 0x99, 0xc5, 0x21, 0x28, 0xe1, 0x30, 0x0c, 0xaa, 0x40, 0x8a,
	0x12, 0x74, 0x2f, 0x7d, 0xc3, 0x90, 0x26, 0x8e, 0x66, 0x5d, 0xed, 0xdd, 0x97, 0xf3, 0xcb, 0xcd,
	0xa9, 0x49, 0x79, 0xb5, 0x8b, 0x77, 0xde, 0xad, 0x61, 0x8b, 0x3a, 0x36, 0xa0, 0xbf, 0x2b, 0x10,
	0x67, 0x78, 0x81, 0x91, 0xda, 0x60, 0xa6, 0x06, 0x81, 0xd0, 0x0e, 0x87, 0x19, 0xbf, 0x3f, 0x3a,
	0xe3, 0xec, 0x4e, 0x23, 0xb5, 0xce, 0xae, 0xe1, 0xdd, 0xb9, 0x7d, 0xc2, 0x5e, 0x4d, 0x65, 0x4d,
	0x1e, 0x0d, 0x78, 0xe0, 0xae, 0xe9, 0x89, 0x64, 0xfa, 0x82, 0xdc, 0xb5, 0x07, 0x25, 0x77, 0x70,
	0x2e, 0x0c, 0x2a, 0xad, 0xc6, 0x76, 0x61, 0x07, 0xef, 0x60, 0x8b, 0x56, 0x76, 0x94, 0xc6, 0x24,
	0x77, 0xb0, 0x58, 0xfb, 0x9c, 0x7c, 0x64, 0x45, 0x7b, 0x03, 0xa5, 0xf0, 0x69, 0xc5, 0x2b, 0x25,
	0x7b, 0x20, 0xf9, 0x7d, 0x6c, 0x50, 0x45, 0xfe, 0x57, 0x09, 0xfe, 0xa7, 0x02, 0xb9, 0x3d, 0x26,
	0x79, 0x54, 0x9e, 0x77, 0x1c, 0x4b, 0x4f, 0x38, 0x3e, 0x2c, 0xe2, 0x9d, 0x37, 0x2c, 0x62, 0x15,
	0x98, 0x77, 0xee, 0xbc, 0x62, 0x15, 0x91, 0xcc, 0x1a, 0xd1, 0x29, 0x0f, 0xa4, 0xef, 0x6e, 0x8c,
	0x8c, 0x30, 0x3f, 0x30, 0x64, 0xa4, 0xff, 0x5c, 0x20, 0x1f, 0x8e, 0x0d, 0x2e, 0xba, 0x30, 0x61,
	0x3b, 0x40, 0xf1, 0x67, 0x18, 0x60, 0x79, 0x64, 0x80, 0xfb, 0xa3, 0x8b, 0x67, 0xc7, 0xe8, 0x93,
	0xfb, 0x6f, 0xde, 0x99, 0x81, 0x16, 0x3e, 0xf3, 0x62, 0x19, 0xb1, 0x24, 0xd6, 0xda, 0x39, 0x02,
	0x83, 0x7d, 0xf7, 0xf5, 0x1b, 0x74, 0xa8, 0x85, 0x5f, 0x8d, 0x65, 0xd4, 0x89, 0xb5, 0xa6, 0x6d,
	0x63, 0xc0, 0xb3, 0xed, 0x81, 0x8a, 0x2e, 0x96, 0x43, 0x7b, 0x6f, 0x57, 0x82, 0x5a, 0xf1, 0xb2,
	0x45, 0x36, 0x8d, 0xb1, 0x70, 0xfa, 0x25, 0xb9, 0x21, 0x42, 0xa1, 0x7a, 0x22, 0xf2, 0x8c, 0x71,
	0x18, 0xbd, 0xb8, 0xd6, 0x8e, 0x84, 0x7a, 0x84, 0x93, 0xb1, 0xd4, 0x46, 0xae, 0xb0, 0xf5, 0xc5,
	0x4b, 0x52, 0x79, 0xca, 0x13, 0x01, 0x79, 0xc3, 0x37, 0xe0, 0xc8, 0x46, 0x2e, 0x49, 0x81, 0x68,
	0x92, 0x88, 0x31, 0x5f, 0x84, 0x01, 0xbe, 0x14, 0xda, 0x39, 0x81, 0x55, 0xc9, 0xf9, 0xa2, 0x56,
	0x4a, 0xa2, 0x9f, 0x92, 0xb5, 0x80, 0x47, 0xec, 0x38, 0xd6, 0x09, 0xeb, 0x1b, 0xab, 0x1d, 0xc4,
	0x1e, 0x96, 0xcc, 0x43, 0x88, 0x3c, 0x57, 0x02, 0x1e, 0x3d, 0x8d, 0x75, 0xd2, 0x92, 0x51, 0x6f,
	0xcf, 0x92, 0x4c, 0xf4, 0x80, 0xd9, 0x09, 0x8b, 0x62, 0x1f, 0xa2, 0x87, 0x08, 0x53, 0x65, 0x44,
	0xf7, 0x63, 0xdf, 0x44, 0x0f, 0x77, 0xc8, 0x22, 0x7a, 0x29, 0x7f, 0xa0, 0x50, 0x64, 0x6c, 0xdf,
	0x1c, 0x18, 0xb4, 0x66, 0x41, 0x08, 0xef, 0x50, 0x58, 0xff, 0x98, 0x6b, 0xe1, 0x7c, 0x6b, 0x43,
	0x76, 0xc0, 0x5a, 0x06, 0x32, 0x13, 0x53, 0xc2, 0x8b, 0xb3, 0x44, 0x4c, 0xf8, 0x90, 0x29, 0x6b,
	0x47, 0xe1, 0xc4, 0x90, 0x58, 0xb3, 0x34, 0x93, 0xfe, 0x6a, 0xba, 0x4b, 0x6e, 0x8a, 0x97, 0x7d,
	0xa1, 0xa4, 0x49, 0xc7, 0x79, 0x00, 0x4b, 0x62, 0x62, 0x92, 0xcc, 0x14, 0x26, 0xd0, 0xf6, 0x46,
	0x9e, 0xe9, 0x89, 0xe5, 0x49, 0x8d, 0x5f, 0x83, 0x94, 0xb0, 0x58, 0x99, 0x95, 0xda, 0xb4, 0x33,
	0x80, 0xc0, 0xf2, 0xd6, 0x78, 0x88, 0x3c, 0x5a, 0xe6, 0x74, 0x97, 0x7a, 0x23, 0xdf, 0x9a, 0x56,
	0xd2, 0x92, 0x7e, 0x9a, 0x4a, 0x9e, 0x5e, 0xa8, 0x98, 0x5d, 0xb8, 0x86, 0xb0, 0x05, 0xff, 0x34,
	0x7d, 0xdc, 0x23, 0x14, 0xeb, 0x3a, 0xd6, 0xbc, 0x63, 0x5d, 0xff, 0xec, 0xc2, 0x78, 0x26, 0x3c,
	0x9a, 0x72, 0x4b, 0xc1, 0xf8, 0xa3, 0xc8, 0x7b, 0x84, 0xda, 0x97, 0xa0, 0x79, 0xcd, 0xfc, 0x2b,
	0xd0, 0xcc, 0x52, 0x46, 0x49, 0x35, 0xf2, 0x05, 0xb9, 0x8a, 0x2f, 0x16, 0x8e, 0xe0, 0x21, 0x2c,
	0xb3, 0x0c, 0xda, 0xf9, 0x6b, 0xe8, 0xfe, 0xce, 0x84, 0xee, 0x2f, 0xbe, 0x9b, 0x75, 0xf1, 0x95,
	0xc4, 0x08, 0xa6, 0xe9, 0x47, 0x64, 0x59, 0x6a, 0x26, 0xa3, 0x91, 0xab, 0xc8, 0xbf, 0xc1, 0xa8,
	0x55, 0xea, 0x46, 0x94, 0xbb, 0x8c, 0xbc, 0x47, 0x28, 0xd4, 0x99, 0xb4, 0x27, 0x22, 0xae, 0x64,
	0xcc, 0x4c, 0x04, 0xee, 0xfc, 0x1a, 0xef, 0x9b, 0x0c, 0xa5, 0x6d, 0x09, 0x26, 0x46, 0xa7, 0x9f,
	0x90, 0x15, 0x5c, 0x2f, 0x88, 0xe9, 0x8c, 0xd5, 0x80, 0xd0, 0xe7, 0x37, 0x58, 0x76, 0x5e, 0x06,
	0x5a, 0xd5, 0x92, 0x20, 0xfe, 0xf9, 0x94, 0x5c, 0xcd, 0xbd, 0xfe, 0xf3, 0xc5, 0x91, 0x8c, 0x24,
	0xe8, 0xed, 0x6f, 0xf1, 0x56, 0x70, 0x25, 0x7b, 0xc5, 0x57, 0xcb, 0x68, 0xf4, 0x39, 0x59, 0xc3,
	0xd4, 0x03, 0xa2, 0xab, 0x41, 0x7f, 0x98, 0x82, 0xfc, 0x6d, 0xe1, 0x2d, 0x73, 0x90, 0x55, 0x10,
	0xd0, 0xc6, 0xf6, 0x69, 0x2a, 0xb2, 0xfe, 0x39, 0x99, 0xcb, 0x58, 0xe8, 0x62, 0xf6, 0x5c, 0xa9,
	0x08, 0x0f, 0x95, 0xd6, 0xc9, 0xac, 0x17, 0x47, 0x89, 0x48, 0x1f, 0x56, 0x2e, 0xb8, 0xd9, 0x77,
	0xd9, 0x27, 0x97, 0xb1, 0x02, 0x74, 0x85, 0x5c, 0x3a, 0x6c, 0x94, 0xde, 0xa1, 0xf3, 0x64, 0xc6,
	0xad, 0x57, 0x6a, 0x2f, 0x0e, 0x5b, 0xa5, 0x69, 0xba, 0x44, 0xe6, 0xdb, 0x75, 0xf7, 0x59, 0xdd,
	0x6d, 0xd7, 0x3b, 0x87, 0xad, 0x52, 0x81, 0xce, 0x90, 0x29, 0xf7, 0x70, 0xbf, 0x74, 0x89, 0x2e,
	0x90, 0xd9, 0xd6, 0x41, 0xbb, 0xf3, 0xa4, 0xd2, 0xac, 0x97, 0xa6, 0xcc, 0xd7, 0xfe, 0x41, 0x07,
	0xda, 0x95, 0x2e, 0xd3, 0x12, 0x59, 0xc0, 0x56, 0x95, 0x76, 0xbb, 0xf1, 0x64, 0xbf, 0x74, 0xa5,
	0xfc, 0x9f, 0x05, 0x32, 0x97, 0x55, 0x0f, 0xe9, 0x2a, 0x49, 0xeb, 0x87, 0xa5, 0xff, 0x4e, 0xff,
	0x15, 0x4c, 0x2b, 0x7c, 0x7c, 0xc1, 0xe0, 0x39, 0x46, 0xe9, 0x1d, 0xe8, 0xc3, 0xad, 0x54, 0x3b,
	0x8d, 0x6a, 0xbd, 0x54, 0xa0, 0x94, 0x2c, 0x56, 0x0f, 0x0e, 0x5a, 0xcc, 0x44, 0x45, 0xc8, 0x31,
	0x4d, 0xaf, 0x92, 0xe5, 0xea, 0x41, 0xb3, 0x55, 0xef, 0x34, 0x3a, 0x8d, 0x67, 0x75, 0x0b, 0xcf,
	0xd0, 0x15, 0xb2, 0xf4, 0xbc, 0x5e, 0xff, 0xaa, 0xbe, 0x5f, 0x63, 0x9d, 0x83, 0x43, 0x77, 0xbf,
	0xfe, 0xa2, 0x34, 0x67, 0xc0, 0xbd, 0x83, 0x6a, 0x65, 0x2f, 0x27, 0x80, 0xd0, 0x22, 0x99, 0x6b,
	0xb7, 0xea, 0xd5, 0x4e, 0xa5, 0x73, 0xe0, 0x96, 0xe6, 0xcd, 0x7c, 0xd1, 0x60, 0x23, 0x7d, 0xc1,
	0x34, 0xda, 0xaf, 0x3f, 0x67, 0xad, 0xbd, 0xca, 0x8b, 0xba, 0xcb, 0x5a, 0x07, 0x07, 0x7b, 0xa5,
	0x45, 0xd3, 0xeb, 0xe3, 0x7a, 0xa5, 0x73, 0xe8, 0xd6, 0x6b, 0x50, 0x58, 0x6b, 0x1e, 0xd4, 0xea,
	0xa5, 0xa5, 0xf2, 0x8b, 0xec, 0xed, 0x58, 0xee, 0x2a, 0x9a, 0x56, 0x47, 0x6b, 0xdf, 0x85, 0x0b,
	0x45, 0xa1, 0x57, 0xdc, 0x5e, 0xe7, 0x2b, 0xe0, 0xe5, 0xdf, 0x16, 0x86, 0xb2, 0x87, 0x17, 0xd5,
	0x6f, 0x2d, 0x7b, 0xfc, 0x6e, 0x7b, 0xa4, 0xba, 0x8e, 0x17, 0x55, 0xf6, 0xe1, 0xb9, 0xaf, 0xf8,
	0x51, 0x02, 0x4a, 0x02, 0x17, 0x55, 0x98, 0x7f, 0xd5, 0x0c, 0x58, 0x16, 0x63, 0x37, 0xed, 0xf9,
	0x81, 0x34, 0x26, 0x0d, 0x64, 0xeb, 0x15, 0x93, 0x7c, 0xed, 0x70, 0xca, 0xff, 0x76, 0x99, 0xdc,
	0x31, 0x66, 0xa1, 0xe2, 0xfb, 0x70, 0x66, 0x78, 0x00, 0x9c, 0x56, 0xe1, 0x6d, 0x15, 0x00, 0x5e,
	0x66, 0xbe, 0xe1, 0x4d, 0xf1, 0x4f, 0xc9, 0x1c, 0x3c, 0xbe, 0xf1, 0x79, 0xc2, 0x61, 0x46, 0xf3,
	0x0f, 0x7e, 0xf0, 0x9d, 0xde, 0xa0, 0xbb, 0xb3, 0xa6, 0x3d, 0x74, 0xf5, 0x0f, 0x05, 0x52, 0x1e,
	0x44, 0x41, 0xec, 0x9d, 0x08, 0xb0, 0xef, 0x09, 0x3b, 0x3b, 0x16, 0x22, 0x48, 0x8f, 0x2f, 0x53,
	0x1c, 0xcc, 0xfd, 0x14, 0xcc, 0xbb, 0x3e, 0xda, 0xcb, 0x1b, 0x27, 0xb2, 0x5d, 0x3d, 0xe6, 0xc9,
	0x73, 0x23, 0xcf, 0x1e, 0x67, 0xd7, 0x48, 0x73, 0x6f, 0xa5, 0x1d, 0x4e, 0x24, 0xeb, 0xd1, 0x31,
	0x81, 0x37, 0x9e, 0x38, 0xa6, 0xe9, 0xef, 0x37, 0x26, 0xe3, 0xc2, 0x5f, 0x33, 0xa6, 0x89, 0x64,
	0xbd, 0xfe, 0x6b, 0x72, 0x75, 0xe2, 0x68, 0xe9, 0x43, 0x52, 0x4a, 0xc7, 0x25, 0x7d, 0x7b, 0x33,
	0x05, 0x3b, 0xb6, 0x43, 0x1e, 0x3e, 0xf8, 0xe2, 0xe1, 0x17, 0x8f, 0x3e, 0x7f, 0xf0, 0xc5, 0x67,
	0xee, 0xa2, 0xe5, 0x69, 0xf8, 0xe9, 0xdd, 0xd4, 0x62, 0xae, 0x95, 0x88, 0xec, 0x43, 0xcb, 0x91,
	0x36, 0x0b, 0x59, 0x9b, 0x7a, 0xe4, 0x9b, 0x01, 0x4c, 0x1c, 0xda, 0xff, 0xd6, 0x00, 0xca, 0xef,
	0x91, 0x8d, 0x4c, 0xb5, 0x1a, 0xc6, 0xea, 0xf3, 0x40, 0xfe, 0x0a, 0xbc, 0x46, 0xfa, 0xbe, 0xa2,
	0xbc, 0x4d, 0x9c, 0x11, 0xed, 0x4b, 0x84, 0x4e, 0x52, 0xb7, 0x4d, 0xc9, 0xf4, 0x37, 0x3a, 0x8e,
	0xd2, 0xf7, 0xaa, 0xe6, 0x77, 0xf9, 0xf7, 0x53, 0x69, 0x03, 0x8f, 0x07, 0x78, 0x84, 0xd0, 0xf1,
	0x1b, 0xcd, 0xfc, 0x33, 0x5d, 0x91, 0x8e, 0x3f, 0x08, 0x98, 0xba, 0xf8, 0x20, 0x60, 0xf4, 0x49,
	0xc1, 0xf4, 0xf8, 0x93, 0x82, 0x57, 0x3c, 0x7d, 0xb8, 0xfc, 0x9d, 0x9f, 0x3e, 0x5c, 0xf9, 0x0e,
	0x4f, 0x1f, 0x66, 0x26, 0x3c, 0x7d, 0x78, 0xe3, 0xbb, 0x84, 0xd7, 0x3c, 0x12, 0x98, 0x7b, 0xdd,
	0x23, 0x81, 0xff, 0x9a, 0x22, 0xef, 0x8e, 0xed, 0xcb, 0x63, 0x7e, 0x82, 0x7f, 0x55, 0xf3, 0x36,
	0x06, 0xaa, 0x42, 0x16, 0x46, 0x82, 0xb3, 0x4b, 0x6f, 0x15, 0x9c, 0xcd, 0x8b, 0xd1, 0xb8, 0x6c,
	0xc2, 0x1b, 0xc3, 0xa9, 0x57, 0xbc, 0x31, 0xdc, 0x22, 0xa5, 0x91, 0xac, 0x65, 0xf8, 0x18, 0x69,
	0xb1, 0x9f, 0x4b, 0x48, 0xf0, 0xef, 0x31, 0x46, 0x5e, 0x3b, 0xda, 0x6d, 0x5b, 0xc8, 0x3f, 0x73,
	0x34, 0x3b, 0x36, 0xfa, 0x24, 0xf2, 0xdb, 0x01, 0x87, 0xfa, 0x9c, 0xdd, 0xb1, 0x3c, 0xf3, 0xcf,
	0x90, 0x44, 0x2b, 0xa9, 0xd2, 0x40, 0x05, 0x79, 0x06, 0xac, 0x72, 0x79, 0x7c, 0xc6, 0x17, 0xd5,
	0xdc, 0x2a, 0x16, 0x14, 0x8d, 0x27, 0xfe, 0x9d, 0xc2, 0xec, 0xe4, 0xbf, 0x53, 0xf8, 0x9a, 0x2c,
	0xf1, 0xcc, 0xd4, 0xa1, 0x27, 0x98, 0x83, 0x3e, 0x3f, 0xf9, 0x8e, 0xf6, 0xd0, 0x5d, 0x1c, 0xca,
	0x31, 0xdf, 0x77, 0xff, 0x50, 0x20, 0x37, 0x5f, 0xfb, 0x17, 0x56, 0x74, 0x8b, 0xbc, 0xd5, 0xdf,
	0x58, 0x95, 0xde, 0xa1, 0xf7, 0xc8, 0xd6, 0x9b, 0x38, 0x2b, 0x9e, 0x27, 0xfa, 0x89, 0xf0, 0x4b,
	0x85, 0xb7, 0xe1, 0x76, 0xc5, 0x37, 0xc2, 0x33, 0xdc, 0x97, 0xee, 0x0a, 0x52, 0x1a, 0xbf, 0x80,
	0x30, 0x91, 0xd4, 0xe8, 0x15, 0x44, 0xe9, 0x1d, 0x88, 0x8e, 0xf2, 0xd8, 0x83, 0xfb, 0xa5, 0xc2,
	0x38, 0xf8, 0xe9, 0xfd, 0xfb, 0xa5, 0x4b, 0xe3, 0xe0, 0x17, 0xf7, 0xef, 0x97, 0xa6, 0xee, 0xfe,
	0xae, 0x40, 0xae, 0x4e, 0x2c, 0xec, 0xd1, 0xdb, 0xe4, 0x4d, 0x15, 0xbf, 0xd2, 0x3b, 0xf4, 0x3d,
	0x72, 0x73, 0x32, 0xd3, 0x9e, 0x65, 0x29, 0xd0, 0x32, 0xb9, 0x35, 0x99, 0x25, 0xcd, 0x87, 0x4b,
	0x97, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x0b, 0x4d, 0x69, 0xe7, 0x37, 0x00, 0x00,
}
